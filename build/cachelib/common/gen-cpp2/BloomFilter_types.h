/**
 * Autogenerated by Thrift for BloomFilter.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct numFilters;
struct hashTableBitSize;
struct filterByteSize;
struct fragmentSize;
struct seeds;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_numFilters
#define APACHE_THRIFT_ACCESSOR_numFilters
APACHE_THRIFT_DEFINE_ACCESSOR(numFilters);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hashTableBitSize
#define APACHE_THRIFT_ACCESSOR_hashTableBitSize
APACHE_THRIFT_DEFINE_ACCESSOR(hashTableBitSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_filterByteSize
#define APACHE_THRIFT_ACCESSOR_filterByteSize
APACHE_THRIFT_DEFINE_ACCESSOR(filterByteSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fragmentSize
#define APACHE_THRIFT_ACCESSOR_fragmentSize
APACHE_THRIFT_DEFINE_ACCESSOR(fragmentSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_seeds
#define APACHE_THRIFT_ACCESSOR_seeds
APACHE_THRIFT_DEFINE_ACCESSOR(seeds);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace serialization {
class BloomFilterPersistentData;
}}} // facebook::cachelib::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class BloomFilterPersistentData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = BloomFilterPersistentData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  BloomFilterPersistentData();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  BloomFilterPersistentData(apache::thrift::FragileConstructor, ::std::int32_t numFilters__arg, ::std::int64_t hashTableBitSize__arg, ::std::int64_t filterByteSize__arg, ::std::int32_t fragmentSize__arg, ::std::vector<::std::int64_t> seeds__arg);

  BloomFilterPersistentData(BloomFilterPersistentData&&) noexcept;

  BloomFilterPersistentData(const BloomFilterPersistentData& src);


  BloomFilterPersistentData& operator=(BloomFilterPersistentData&&) noexcept;
  BloomFilterPersistentData& operator=(const BloomFilterPersistentData& src);
  void __clear();

  ~BloomFilterPersistentData();

 public:
  ::std::int32_t numFilters;
 public:
  ::std::int64_t hashTableBitSize;
 public:
  ::std::int64_t filterByteSize;
 public:
  ::std::int32_t fragmentSize;
 public:
  ::std::vector<::std::int64_t> seeds;

 public:

  bool operator==(const BloomFilterPersistentData&) const;
  bool operator<(const BloomFilterPersistentData&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> numFilters_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> numFilters_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->numFilters)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> numFilters_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->numFilters};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> numFilters_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->numFilters)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> hashTableBitSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> hashTableBitSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> hashTableBitSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->hashTableBitSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> hashTableBitSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->hashTableBitSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> filterByteSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> filterByteSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->filterByteSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> filterByteSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->filterByteSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> filterByteSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->filterByteSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> fragmentSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> fragmentSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->fragmentSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> fragmentSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->fragmentSize};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> fragmentSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->fragmentSize)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> seeds_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> seeds_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->seeds)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> seeds_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->seeds};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> seeds_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->seeds)};
  }

  ::std::int32_t get_numFilters() const {
    return numFilters;
  }

  [[deprecated("Use `FOO.numFilters_ref() = BAR;` instead of `FOO.set_numFilters(BAR);`")]]
  ::std::int32_t& set_numFilters(::std::int32_t numFilters_) {
    numFilters_ref() = numFilters_;
    return numFilters;
  }

  ::std::int64_t get_hashTableBitSize() const {
    return hashTableBitSize;
  }

  [[deprecated("Use `FOO.hashTableBitSize_ref() = BAR;` instead of `FOO.set_hashTableBitSize(BAR);`")]]
  ::std::int64_t& set_hashTableBitSize(::std::int64_t hashTableBitSize_) {
    hashTableBitSize_ref() = hashTableBitSize_;
    return hashTableBitSize;
  }

  ::std::int64_t get_filterByteSize() const {
    return filterByteSize;
  }

  [[deprecated("Use `FOO.filterByteSize_ref() = BAR;` instead of `FOO.set_filterByteSize(BAR);`")]]
  ::std::int64_t& set_filterByteSize(::std::int64_t filterByteSize_) {
    filterByteSize_ref() = filterByteSize_;
    return filterByteSize;
  }

  ::std::int32_t get_fragmentSize() const {
    return fragmentSize;
  }

  [[deprecated("Use `FOO.fragmentSize_ref() = BAR;` instead of `FOO.set_fragmentSize(BAR);`")]]
  ::std::int32_t& set_fragmentSize(::std::int32_t fragmentSize_) {
    fragmentSize_ref() = fragmentSize_;
    return fragmentSize;
  }
  const ::std::vector<::std::int64_t>& get_seeds() const&;
  ::std::vector<::std::int64_t> get_seeds() &&;

  template <typename T_BloomFilterPersistentData_seeds_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.seeds_ref() = BAR;` instead of `FOO.set_seeds(BAR);`")]]
  ::std::vector<::std::int64_t>& set_seeds(T_BloomFilterPersistentData_seeds_struct_setter&& seeds_) {
    seeds_ref() = std::forward<T_BloomFilterPersistentData_seeds_struct_setter>(seeds_);
    return seeds;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<BloomFilterPersistentData>;
  friend void swap(BloomFilterPersistentData& a, BloomFilterPersistentData& b);
};

template <class Protocol_>
uint32_t BloomFilterPersistentData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
