/**
 * Autogenerated by Thrift for shm.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "shm_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::ShmTypeObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("shm.ShmTypeObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& shm_ShmTypeObject = res.first->second;
  shm_ShmTypeObject.name_ref() = "shm.ShmTypeObject";
  shm_ShmTypeObject.is_union_ref() = false;
  static const EncodedThriftField
  shm_ShmTypeObject_fields[] = {
    {1, "path", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "usePosix", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : shm_ShmTypeObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    shm_ShmTypeObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::ShmManagerObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("shm.ShmManagerObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& shm_ShmManagerObject = res.first->second;
  shm_ShmManagerObject.name_ref() = "shm.ShmManagerObject";
  shm_ShmManagerObject.is_union_ref() = false;
  static const EncodedThriftField
  shm_ShmManagerObject_fields[] = {
    {1, "shmVal", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "nameToKeyMap", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::ShmTypeObject>>("shm.ShmTypeObject")), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : shm_ShmManagerObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    shm_ShmManagerObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
