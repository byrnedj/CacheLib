/**
 * Autogenerated by Thrift for shm.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct path;
struct usePosix;
struct shmVal;
struct nameToKeyMap;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_path
#define APACHE_THRIFT_ACCESSOR_path
APACHE_THRIFT_DEFINE_ACCESSOR(path);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_usePosix
#define APACHE_THRIFT_ACCESSOR_usePosix
APACHE_THRIFT_DEFINE_ACCESSOR(usePosix);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shmVal
#define APACHE_THRIFT_ACCESSOR_shmVal
APACHE_THRIFT_DEFINE_ACCESSOR(shmVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nameToKeyMap
#define APACHE_THRIFT_ACCESSOR_nameToKeyMap
APACHE_THRIFT_DEFINE_ACCESSOR(nameToKeyMap);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace serialization {
class ShmTypeObject;
class ShmManagerObject;
}}} // facebook::cachelib::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class ShmTypeObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ShmTypeObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ShmTypeObject() :
      usePosix() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ShmTypeObject(apache::thrift::FragileConstructor, ::std::string path__arg, bool usePosix__arg);

  ShmTypeObject(ShmTypeObject&&) noexcept;

  ShmTypeObject(const ShmTypeObject& src);


  ShmTypeObject& operator=(ShmTypeObject&&) noexcept;
  ShmTypeObject& operator=(const ShmTypeObject& src);
  void __clear();
 public:
  ::std::string path;
 public:
  bool usePosix;

 public:

  bool operator==(const ShmTypeObject&) const;
  bool operator<(const ShmTypeObject&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> path_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->path};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> path_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->path)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> path_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->path};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> path_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->path)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> usePosix_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->usePosix};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> usePosix_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->usePosix)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> usePosix_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->usePosix};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> usePosix_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->usePosix)};
  }

  const ::std::string& get_path() const& {
    return path;
  }

  ::std::string get_path() && {
    return std::move(path);
  }

  template <typename T_ShmTypeObject_path_struct_setter = ::std::string>
  [[deprecated("Use `FOO.path_ref() = BAR;` instead of `FOO.set_path(BAR);`")]]
  ::std::string& set_path(T_ShmTypeObject_path_struct_setter&& path_) {
    path_ref() = std::forward<T_ShmTypeObject_path_struct_setter>(path_);
    return path;
  }

  bool get_usePosix() const {
    return usePosix;
  }

  [[deprecated("Use `FOO.usePosix_ref() = BAR;` instead of `FOO.set_usePosix(BAR);`")]]
  bool& set_usePosix(bool usePosix_) {
    usePosix_ref() = usePosix_;
    return usePosix;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ShmTypeObject>;
  friend void swap(ShmTypeObject& a, ShmTypeObject& b);
};

template <class Protocol_>
uint32_t ShmTypeObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class ShmManagerObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ShmManagerObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ShmManagerObject() :
      shmVal() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ShmManagerObject(apache::thrift::FragileConstructor, ::std::int8_t shmVal__arg, ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject> nameToKeyMap__arg);

  ShmManagerObject(ShmManagerObject&&) noexcept;

  ShmManagerObject(const ShmManagerObject& src);


  ShmManagerObject& operator=(ShmManagerObject&&) noexcept;
  ShmManagerObject& operator=(const ShmManagerObject& src);
  void __clear();
 public:
  ::std::int8_t shmVal;
 public:
  ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject> nameToKeyMap;

 public:

  bool operator==(const ShmManagerObject&) const;
  bool operator<(const ShmManagerObject&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> shmVal_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> shmVal_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->shmVal)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> shmVal_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->shmVal};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> shmVal_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->shmVal)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> nameToKeyMap_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> nameToKeyMap_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->nameToKeyMap)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> nameToKeyMap_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->nameToKeyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> nameToKeyMap_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->nameToKeyMap)};
  }

  ::std::int8_t get_shmVal() const {
    return shmVal;
  }

  [[deprecated("Use `FOO.shmVal_ref() = BAR;` instead of `FOO.set_shmVal(BAR);`")]]
  ::std::int8_t& set_shmVal(::std::int8_t shmVal_) {
    shmVal_ref() = shmVal_;
    return shmVal;
  }
  const ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>& get_nameToKeyMap() const&;
  ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject> get_nameToKeyMap() &&;

  template <typename T_ShmManagerObject_nameToKeyMap_struct_setter = ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>
  [[deprecated("Use `FOO.nameToKeyMap_ref() = BAR;` instead of `FOO.set_nameToKeyMap(BAR);`")]]
  ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>& set_nameToKeyMap(T_ShmManagerObject_nameToKeyMap_struct_setter&& nameToKeyMap_) {
    nameToKeyMap_ref() = std::forward<T_ShmManagerObject_nameToKeyMap_struct_setter>(nameToKeyMap_);
    return nameToKeyMap;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ShmManagerObject>;
  friend void swap(ShmManagerObject& a, ShmManagerObject& b);
};

template <class Protocol_>
uint32_t ShmManagerObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
