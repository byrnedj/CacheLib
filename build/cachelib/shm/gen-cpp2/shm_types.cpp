/**
 * Autogenerated by Thrift for shm.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "shm_types.h"
#include "shm_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "shm_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::serialization::ShmTypeObject>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::serialization::ShmTypeObject>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace serialization {

ShmTypeObject::ShmTypeObject(const ShmTypeObject&) = default;
ShmTypeObject& ShmTypeObject::operator=(const ShmTypeObject&) = default;
ShmTypeObject::ShmTypeObject(ShmTypeObject&& other) noexcept  :
    path(std::move(other.path)),
    usePosix(std::move(other.usePosix)) {
}

ShmTypeObject& ShmTypeObject::operator=(FOLLY_MAYBE_UNUSED ShmTypeObject&& other) noexcept {
    this->path = std::move(other.path);
    this->usePosix = std::move(other.usePosix);
    return *this;
}


ShmTypeObject::ShmTypeObject(apache::thrift::FragileConstructor, ::std::string path__arg, bool usePosix__arg) :
    path(std::move(path__arg)),
    usePosix(std::move(usePosix__arg)) {
}


void ShmTypeObject::__clear() {
  // clear all fields
  this->path = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->usePosix = bool();
}

bool ShmTypeObject::operator==(const ShmTypeObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.path_ref() == rhs.path_ref())) {
    return false;
  }
  if (!(lhs.usePosix_ref() == rhs.usePosix_ref())) {
    return false;
  }
  return true;
}

bool ShmTypeObject::operator<(const ShmTypeObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.path_ref() == rhs.path_ref())) {
    return lhs.path_ref() < rhs.path_ref();
  }
  if (!(lhs.usePosix_ref() == rhs.usePosix_ref())) {
    return lhs.usePosix_ref() < rhs.usePosix_ref();
  }
  return false;
}


void swap(ShmTypeObject& a, ShmTypeObject& b) {
  using ::std::swap;
  swap(a.path_ref().value(), b.path_ref().value());
  swap(a.usePosix_ref().value(), b.usePosix_ref().value());
}

template void ShmTypeObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ShmTypeObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ShmTypeObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ShmTypeObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ShmTypeObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ShmTypeObject::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ShmTypeObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ShmTypeObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::serialization

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::serialization::ShmManagerObject>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::serialization::ShmManagerObject>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace serialization {

ShmManagerObject::ShmManagerObject(const ShmManagerObject&) = default;
ShmManagerObject& ShmManagerObject::operator=(const ShmManagerObject&) = default;
ShmManagerObject::ShmManagerObject(ShmManagerObject&& other) noexcept  :
    shmVal(std::move(other.shmVal)),
    nameToKeyMap(std::move(other.nameToKeyMap)) {
}

ShmManagerObject& ShmManagerObject::operator=(FOLLY_MAYBE_UNUSED ShmManagerObject&& other) noexcept {
    this->shmVal = std::move(other.shmVal);
    this->nameToKeyMap = std::move(other.nameToKeyMap);
    return *this;
}


ShmManagerObject::ShmManagerObject(apache::thrift::FragileConstructor, ::std::int8_t shmVal__arg, ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject> nameToKeyMap__arg) :
    shmVal(std::move(shmVal__arg)),
    nameToKeyMap(std::move(nameToKeyMap__arg)) {
}


void ShmManagerObject::__clear() {
  // clear all fields
  this->shmVal = ::std::int8_t();
  this->nameToKeyMap.clear();
}

bool ShmManagerObject::operator==(const ShmManagerObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.shmVal_ref() == rhs.shmVal_ref())) {
    return false;
  }
  if (!(lhs.nameToKeyMap_ref() == rhs.nameToKeyMap_ref())) {
    return false;
  }
  return true;
}

bool ShmManagerObject::operator<(const ShmManagerObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.shmVal_ref() == rhs.shmVal_ref())) {
    return lhs.shmVal_ref() < rhs.shmVal_ref();
  }
  if (!(lhs.nameToKeyMap_ref() == rhs.nameToKeyMap_ref())) {
    return lhs.nameToKeyMap_ref() < rhs.nameToKeyMap_ref();
  }
  return false;
}

const ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>& ShmManagerObject::get_nameToKeyMap() const& {
  return nameToKeyMap;
}

::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject> ShmManagerObject::get_nameToKeyMap() && {
  return std::move(nameToKeyMap);
}


void swap(ShmManagerObject& a, ShmManagerObject& b) {
  using ::std::swap;
  swap(a.shmVal_ref().value(), b.shmVal_ref().value());
  swap(a.nameToKeyMap_ref().value(), b.nameToKeyMap_ref().value());
}

template void ShmManagerObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ShmManagerObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ShmManagerObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ShmManagerObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ShmManagerObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ShmManagerObject::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ShmManagerObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ShmManagerObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ShmManagerObject,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ShmManagerObject,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::facebook::cachelib::serialization::ShmTypeObject>>,
    "inconsistent use of nimble option");

}}} // facebook::cachelib::serialization

namespace facebook { namespace cachelib { namespace serialization { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}}}} // facebook::cachelib::serialization
