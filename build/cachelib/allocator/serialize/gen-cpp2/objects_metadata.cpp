/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "objects_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::CacheAllocatorMetadata>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.CacheAllocatorMetadata", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_CacheAllocatorMetadata = res.first->second;
  objects_CacheAllocatorMetadata.name_ref() = "objects.CacheAllocatorMetadata";
  objects_CacheAllocatorMetadata.is_union_ref() = false;
  static const EncodedThriftField
  objects_CacheAllocatorMetadata_fields[] = {
    {1, "allocatorVersion", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "cacheCreationTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "accessType", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "mmType", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "fragmentationSize", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE))), std::vector<ThriftConstStruct>{}},
    {6, "compactCachePools", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE)), std::vector<ThriftConstStruct>{}},
    {7, "numPermanentItems", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {8, "numChainedParentItems", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {9, "numChainedChildItems", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {10, "ramFormatVersion", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {11, "numAbortedSlabReleases", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_CacheAllocatorMetadata_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_CacheAllocatorMetadata.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::NvmCacheMetadata>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.NvmCacheMetadata", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_NvmCacheMetadata = res.first->second;
  objects_NvmCacheMetadata.name_ref() = "objects.NvmCacheMetadata";
  objects_NvmCacheMetadata.is_union_ref() = false;
  static const EncodedThriftField
  objects_NvmCacheMetadata_fields[] = {
    {1, "nvmFormatVersion", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "creationTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "safeShutDown", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "encryptionEnabled", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "truncateAllocSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_NvmCacheMetadata_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_NvmCacheMetadata.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::CompactCacheMetadataObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.CompactCacheMetadataObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_CompactCacheMetadataObject = res.first->second;
  objects_CompactCacheMetadataObject.name_ref() = "objects.CompactCacheMetadataObject";
  objects_CompactCacheMetadataObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_CompactCacheMetadataObject_fields[] = {
    {1, "keySize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "valueSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_CompactCacheMetadataObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_CompactCacheMetadataObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::CompactCacheAllocatorObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.CompactCacheAllocatorObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_CompactCacheAllocatorObject = res.first->second;
  objects_CompactCacheAllocatorObject.name_ref() = "objects.CompactCacheAllocatorObject";
  objects_CompactCacheAllocatorObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_CompactCacheAllocatorObject_fields[] = {
    {1, "chunks", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}},
    {2, "ccMetadata", false, std::make_unique<Struct< ::facebook::cachelib::serialization::CompactCacheMetadataObject>>("objects.CompactCacheMetadataObject"), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_CompactCacheAllocatorObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_CompactCacheAllocatorObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::CompactCacheAllocatorManagerObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.CompactCacheAllocatorManagerObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_CompactCacheAllocatorManagerObject = res.first->second;
  objects_CompactCacheAllocatorManagerObject.name_ref() = "objects.CompactCacheAllocatorManagerObject";
  objects_CompactCacheAllocatorManagerObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_CompactCacheAllocatorManagerObject_fields[] = {
    {1, "allocators", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>("objects.CompactCacheAllocatorObject")), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_CompactCacheAllocatorManagerObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_CompactCacheAllocatorManagerObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMLruConfig>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMLruConfig", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMLruConfig = res.first->second;
  objects_MMLruConfig.name_ref() = "objects.MMLruConfig";
  objects_MMLruConfig.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMLruConfig_fields[] = {
    {1, "lruRefreshTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "updateOnWrite", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "lruInsertionPointSpec", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "updateOnRead", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "tryLockUpdate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "lruRefreshRatio", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMLruConfig_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMLruConfig.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMLruObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMLruObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMLruObject = res.first->second;
  objects_MMLruObject.name_ref() = "objects.MMLruObject";
  objects_MMLruObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMLruObject_fields[] = {
    {1, "config", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MMLruConfig>>("objects.MMLruConfig"), std::vector<ThriftConstStruct>{}},
    {5, "evictions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "insertionPoint", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {7, "tailSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {8, "lru", false, std::make_unique<Struct< ::facebook::cachelib::serialization::DListObject>>("objects.DListObject"), std::vector<ThriftConstStruct>{}},
    {9, "compressedInsertionPoint", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMLruObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMLruObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMLruCollection>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMLruCollection", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMLruCollection = res.first->second;
  objects_MMLruCollection.name_ref() = "objects.MMLruCollection";
  objects_MMLruCollection.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMLruCollection_fields[] = {
    {1, "pools", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::MMLruObject>>("objects.MMLruObject"))), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMLruCollection_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMLruCollection.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MM2QConfig>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MM2QConfig", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MM2QConfig = res.first->second;
  objects_MM2QConfig.name_ref() = "objects.MM2QConfig";
  objects_MM2QConfig.is_union_ref() = false;
  static const EncodedThriftField
  objects_MM2QConfig_fields[] = {
    {1, "lruRefreshTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "updateOnWrite", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "hotSizePercent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "coldSizePercent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "updateOnRead", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "tryLockUpdate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {7, "rebalanceOnRecordAccess", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {8, "lruRefreshRatio", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MM2QConfig_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MM2QConfig.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MM2QObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MM2QObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MM2QObject = res.first->second;
  objects_MM2QObject.name_ref() = "objects.MM2QObject";
  objects_MM2QObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MM2QObject_fields[] = {
    {1, "config", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MM2QConfig>>("objects.MM2QConfig"), std::vector<ThriftConstStruct>{}},
    {13, "tailTrackingEnabled", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {11, "evictions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {12, "lrus", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MultiDListObject>>("objects.MultiDListObject"), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MM2QObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MM2QObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MM2QCollection>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MM2QCollection", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MM2QCollection = res.first->second;
  objects_MM2QCollection.name_ref() = "objects.MM2QCollection";
  objects_MM2QCollection.is_union_ref() = false;
  static const EncodedThriftField
  objects_MM2QCollection_fields[] = {
    {1, "pools", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::MM2QObject>>("objects.MM2QObject"))), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MM2QCollection_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MM2QCollection.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMTinyLFUConfig>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMTinyLFUConfig", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMTinyLFUConfig = res.first->second;
  objects_MMTinyLFUConfig.name_ref() = "objects.MMTinyLFUConfig";
  objects_MMTinyLFUConfig.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMTinyLFUConfig_fields[] = {
    {1, "lruRefreshTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "updateOnWrite", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "windowToCacheSizeRatio", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "tinySizePercent", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "updateOnRead", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "tryLockUpdate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {7, "lruRefreshRatio", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMTinyLFUConfig_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMTinyLFUConfig.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMTinyLFUObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMTinyLFUObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMTinyLFUObject = res.first->second;
  objects_MMTinyLFUObject.name_ref() = "objects.MMTinyLFUObject";
  objects_MMTinyLFUObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMTinyLFUObject_fields[] = {
    {1, "config", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MMTinyLFUConfig>>("objects.MMTinyLFUConfig"), std::vector<ThriftConstStruct>{}},
    {2, "evictions", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "lrus", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MultiDListObject>>("objects.MultiDListObject"), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMTinyLFUObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMTinyLFUObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMTinyLFUCollection>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMTinyLFUCollection", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMTinyLFUCollection = res.first->second;
  objects_MMTinyLFUCollection.name_ref() = "objects.MMTinyLFUCollection";
  objects_MMTinyLFUCollection.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMTinyLFUCollection_fields[] = {
    {1, "pools", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::MMTinyLFUObject>>("objects.MMTinyLFUObject"))), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMTinyLFUCollection_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMTinyLFUCollection.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::ChainedHashTableObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.ChainedHashTableObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_ChainedHashTableObject = res.first->second;
  objects_ChainedHashTableObject.name_ref() = "objects.ChainedHashTableObject";
  objects_ChainedHashTableObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_ChainedHashTableObject_fields[] = {
    {1, "bucketsPower", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "locksPower", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "numKeys", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "hasherMagicId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_ChainedHashTableObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_ChainedHashTableObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MMTTLBucketObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MMTTLBucketObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MMTTLBucketObject = res.first->second;
  objects_MMTTLBucketObject.name_ref() = "objects.MMTTLBucketObject";
  objects_MMTTLBucketObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MMTTLBucketObject_fields[] = {
    {4, "expirationTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "creationTime", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "dList", false, std::make_unique<Struct< ::facebook::cachelib::serialization::DListObject>>("objects.DListObject"), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MMTTLBucketObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MMTTLBucketObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::TTLBucketCollection>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.TTLBucketCollection", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_TTLBucketCollection = res.first->second;
  objects_TTLBucketCollection.name_ref() = "objects.TTLBucketCollection";
  objects_TTLBucketCollection.is_union_ref() = false;
  static const EncodedThriftField
  objects_TTLBucketCollection_fields[] = {
    {1, "buckets", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::make_unique<Struct< ::facebook::cachelib::serialization::MMTTLBucketObject>>("objects.MMTTLBucketObject")), std::vector<ThriftConstStruct>{}},
    {2, "minEpoch", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "maxTTL", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "interval", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_TTLBucketCollection_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_TTLBucketCollection.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
