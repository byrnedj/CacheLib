/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "cachelib/allocator/datastruct/serialize/gen-cpp2/objects_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct allocatorVersion;
struct cacheCreationTime;
struct accessType;
struct mmType;
struct fragmentationSize;
struct compactCachePools;
struct numPermanentItems;
struct numChainedParentItems;
struct numChainedChildItems;
struct ramFormatVersion;
struct numAbortedSlabReleases;
struct nvmFormatVersion;
struct creationTime;
struct safeShutDown;
struct encryptionEnabled;
struct truncateAllocSize;
struct keySize;
struct valueSize;
struct chunks;
struct ccMetadata;
struct allocators;
struct lruRefreshTime;
struct updateOnWrite;
struct lruInsertionPointSpec;
struct updateOnRead;
struct tryLockUpdate;
struct lruRefreshRatio;
struct config;
struct evictions;
struct insertionPoint;
struct tailSize;
struct lru;
struct compressedInsertionPoint;
struct pools;
struct lruRefreshTime;
struct updateOnWrite;
struct hotSizePercent;
struct coldSizePercent;
struct updateOnRead;
struct tryLockUpdate;
struct rebalanceOnRecordAccess;
struct lruRefreshRatio;
struct config;
struct tailTrackingEnabled;
struct evictions;
struct lrus;
struct pools;
struct lruRefreshTime;
struct updateOnWrite;
struct windowToCacheSizeRatio;
struct tinySizePercent;
struct updateOnRead;
struct tryLockUpdate;
struct lruRefreshRatio;
struct config;
struct evictions;
struct lrus;
struct pools;
struct bucketsPower;
struct locksPower;
struct numKeys;
struct hasherMagicId;
struct expirationTime;
struct creationTime;
struct dList;
struct buckets;
struct minEpoch;
struct maxTTL;
struct interval;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_allocatorVersion
#define APACHE_THRIFT_ACCESSOR_allocatorVersion
APACHE_THRIFT_DEFINE_ACCESSOR(allocatorVersion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_cacheCreationTime
#define APACHE_THRIFT_ACCESSOR_cacheCreationTime
APACHE_THRIFT_DEFINE_ACCESSOR(cacheCreationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_accessType
#define APACHE_THRIFT_ACCESSOR_accessType
APACHE_THRIFT_DEFINE_ACCESSOR(accessType);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mmType
#define APACHE_THRIFT_ACCESSOR_mmType
APACHE_THRIFT_DEFINE_ACCESSOR(mmType);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fragmentationSize
#define APACHE_THRIFT_ACCESSOR_fragmentationSize
APACHE_THRIFT_DEFINE_ACCESSOR(fragmentationSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compactCachePools
#define APACHE_THRIFT_ACCESSOR_compactCachePools
APACHE_THRIFT_DEFINE_ACCESSOR(compactCachePools);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numPermanentItems
#define APACHE_THRIFT_ACCESSOR_numPermanentItems
APACHE_THRIFT_DEFINE_ACCESSOR(numPermanentItems);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numChainedParentItems
#define APACHE_THRIFT_ACCESSOR_numChainedParentItems
APACHE_THRIFT_DEFINE_ACCESSOR(numChainedParentItems);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numChainedChildItems
#define APACHE_THRIFT_ACCESSOR_numChainedChildItems
APACHE_THRIFT_DEFINE_ACCESSOR(numChainedChildItems);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ramFormatVersion
#define APACHE_THRIFT_ACCESSOR_ramFormatVersion
APACHE_THRIFT_DEFINE_ACCESSOR(ramFormatVersion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numAbortedSlabReleases
#define APACHE_THRIFT_ACCESSOR_numAbortedSlabReleases
APACHE_THRIFT_DEFINE_ACCESSOR(numAbortedSlabReleases);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nvmFormatVersion
#define APACHE_THRIFT_ACCESSOR_nvmFormatVersion
APACHE_THRIFT_DEFINE_ACCESSOR(nvmFormatVersion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_creationTime
#define APACHE_THRIFT_ACCESSOR_creationTime
APACHE_THRIFT_DEFINE_ACCESSOR(creationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_safeShutDown
#define APACHE_THRIFT_ACCESSOR_safeShutDown
APACHE_THRIFT_DEFINE_ACCESSOR(safeShutDown);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encryptionEnabled
#define APACHE_THRIFT_ACCESSOR_encryptionEnabled
APACHE_THRIFT_DEFINE_ACCESSOR(encryptionEnabled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_truncateAllocSize
#define APACHE_THRIFT_ACCESSOR_truncateAllocSize
APACHE_THRIFT_DEFINE_ACCESSOR(truncateAllocSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_keySize
#define APACHE_THRIFT_ACCESSOR_keySize
APACHE_THRIFT_DEFINE_ACCESSOR(keySize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_valueSize
#define APACHE_THRIFT_ACCESSOR_valueSize
APACHE_THRIFT_DEFINE_ACCESSOR(valueSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_chunks
#define APACHE_THRIFT_ACCESSOR_chunks
APACHE_THRIFT_DEFINE_ACCESSOR(chunks);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ccMetadata
#define APACHE_THRIFT_ACCESSOR_ccMetadata
APACHE_THRIFT_DEFINE_ACCESSOR(ccMetadata);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_allocators
#define APACHE_THRIFT_ACCESSOR_allocators
APACHE_THRIFT_DEFINE_ACCESSOR(allocators);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshTime
#define APACHE_THRIFT_ACCESSOR_lruRefreshTime
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnWrite
#define APACHE_THRIFT_ACCESSOR_updateOnWrite
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnWrite);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruInsertionPointSpec
#define APACHE_THRIFT_ACCESSOR_lruInsertionPointSpec
APACHE_THRIFT_DEFINE_ACCESSOR(lruInsertionPointSpec);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnRead
#define APACHE_THRIFT_ACCESSOR_updateOnRead
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnRead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tryLockUpdate
#define APACHE_THRIFT_ACCESSOR_tryLockUpdate
APACHE_THRIFT_DEFINE_ACCESSOR(tryLockUpdate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshRatio
#define APACHE_THRIFT_ACCESSOR_lruRefreshRatio
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshRatio);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_config
#define APACHE_THRIFT_ACCESSOR_config
APACHE_THRIFT_DEFINE_ACCESSOR(config);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_evictions
#define APACHE_THRIFT_ACCESSOR_evictions
APACHE_THRIFT_DEFINE_ACCESSOR(evictions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_insertionPoint
#define APACHE_THRIFT_ACCESSOR_insertionPoint
APACHE_THRIFT_DEFINE_ACCESSOR(insertionPoint);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tailSize
#define APACHE_THRIFT_ACCESSOR_tailSize
APACHE_THRIFT_DEFINE_ACCESSOR(tailSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lru
#define APACHE_THRIFT_ACCESSOR_lru
APACHE_THRIFT_DEFINE_ACCESSOR(lru);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedInsertionPoint
#define APACHE_THRIFT_ACCESSOR_compressedInsertionPoint
APACHE_THRIFT_DEFINE_ACCESSOR(compressedInsertionPoint);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pools
#define APACHE_THRIFT_ACCESSOR_pools
APACHE_THRIFT_DEFINE_ACCESSOR(pools);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshTime
#define APACHE_THRIFT_ACCESSOR_lruRefreshTime
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnWrite
#define APACHE_THRIFT_ACCESSOR_updateOnWrite
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnWrite);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hotSizePercent
#define APACHE_THRIFT_ACCESSOR_hotSizePercent
APACHE_THRIFT_DEFINE_ACCESSOR(hotSizePercent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_coldSizePercent
#define APACHE_THRIFT_ACCESSOR_coldSizePercent
APACHE_THRIFT_DEFINE_ACCESSOR(coldSizePercent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnRead
#define APACHE_THRIFT_ACCESSOR_updateOnRead
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnRead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tryLockUpdate
#define APACHE_THRIFT_ACCESSOR_tryLockUpdate
APACHE_THRIFT_DEFINE_ACCESSOR(tryLockUpdate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rebalanceOnRecordAccess
#define APACHE_THRIFT_ACCESSOR_rebalanceOnRecordAccess
APACHE_THRIFT_DEFINE_ACCESSOR(rebalanceOnRecordAccess);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshRatio
#define APACHE_THRIFT_ACCESSOR_lruRefreshRatio
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshRatio);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_config
#define APACHE_THRIFT_ACCESSOR_config
APACHE_THRIFT_DEFINE_ACCESSOR(config);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tailTrackingEnabled
#define APACHE_THRIFT_ACCESSOR_tailTrackingEnabled
APACHE_THRIFT_DEFINE_ACCESSOR(tailTrackingEnabled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_evictions
#define APACHE_THRIFT_ACCESSOR_evictions
APACHE_THRIFT_DEFINE_ACCESSOR(evictions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lrus
#define APACHE_THRIFT_ACCESSOR_lrus
APACHE_THRIFT_DEFINE_ACCESSOR(lrus);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pools
#define APACHE_THRIFT_ACCESSOR_pools
APACHE_THRIFT_DEFINE_ACCESSOR(pools);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshTime
#define APACHE_THRIFT_ACCESSOR_lruRefreshTime
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnWrite
#define APACHE_THRIFT_ACCESSOR_updateOnWrite
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnWrite);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_windowToCacheSizeRatio
#define APACHE_THRIFT_ACCESSOR_windowToCacheSizeRatio
APACHE_THRIFT_DEFINE_ACCESSOR(windowToCacheSizeRatio);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tinySizePercent
#define APACHE_THRIFT_ACCESSOR_tinySizePercent
APACHE_THRIFT_DEFINE_ACCESSOR(tinySizePercent);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_updateOnRead
#define APACHE_THRIFT_ACCESSOR_updateOnRead
APACHE_THRIFT_DEFINE_ACCESSOR(updateOnRead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tryLockUpdate
#define APACHE_THRIFT_ACCESSOR_tryLockUpdate
APACHE_THRIFT_DEFINE_ACCESSOR(tryLockUpdate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lruRefreshRatio
#define APACHE_THRIFT_ACCESSOR_lruRefreshRatio
APACHE_THRIFT_DEFINE_ACCESSOR(lruRefreshRatio);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_config
#define APACHE_THRIFT_ACCESSOR_config
APACHE_THRIFT_DEFINE_ACCESSOR(config);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_evictions
#define APACHE_THRIFT_ACCESSOR_evictions
APACHE_THRIFT_DEFINE_ACCESSOR(evictions);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lrus
#define APACHE_THRIFT_ACCESSOR_lrus
APACHE_THRIFT_DEFINE_ACCESSOR(lrus);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pools
#define APACHE_THRIFT_ACCESSOR_pools
APACHE_THRIFT_DEFINE_ACCESSOR(pools);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bucketsPower
#define APACHE_THRIFT_ACCESSOR_bucketsPower
APACHE_THRIFT_DEFINE_ACCESSOR(bucketsPower);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_locksPower
#define APACHE_THRIFT_ACCESSOR_locksPower
APACHE_THRIFT_DEFINE_ACCESSOR(locksPower);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numKeys
#define APACHE_THRIFT_ACCESSOR_numKeys
APACHE_THRIFT_DEFINE_ACCESSOR(numKeys);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_hasherMagicId
#define APACHE_THRIFT_ACCESSOR_hasherMagicId
APACHE_THRIFT_DEFINE_ACCESSOR(hasherMagicId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_expirationTime
#define APACHE_THRIFT_ACCESSOR_expirationTime
APACHE_THRIFT_DEFINE_ACCESSOR(expirationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_creationTime
#define APACHE_THRIFT_ACCESSOR_creationTime
APACHE_THRIFT_DEFINE_ACCESSOR(creationTime);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_dList
#define APACHE_THRIFT_ACCESSOR_dList
APACHE_THRIFT_DEFINE_ACCESSOR(dList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buckets
#define APACHE_THRIFT_ACCESSOR_buckets
APACHE_THRIFT_DEFINE_ACCESSOR(buckets);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_minEpoch
#define APACHE_THRIFT_ACCESSOR_minEpoch
APACHE_THRIFT_DEFINE_ACCESSOR(minEpoch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_maxTTL
#define APACHE_THRIFT_ACCESSOR_maxTTL
APACHE_THRIFT_DEFINE_ACCESSOR(maxTTL);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_interval
#define APACHE_THRIFT_ACCESSOR_interval
APACHE_THRIFT_DEFINE_ACCESSOR(interval);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace serialization {
class CacheAllocatorMetadata;
class NvmCacheMetadata;
class CompactCacheMetadataObject;
class CompactCacheAllocatorObject;
class CompactCacheAllocatorManagerObject;
class MMLruConfig;
class MMLruObject;
class MMLruCollection;
class MM2QConfig;
class MM2QObject;
class MM2QCollection;
class MMTinyLFUConfig;
class MMTinyLFUObject;
class MMTinyLFUCollection;
class ChainedHashTableObject;
class MMTTLBucketObject;
class TTLBucketCollection;
}}} // facebook::cachelib::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class CacheAllocatorMetadata final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = CacheAllocatorMetadata;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CacheAllocatorMetadata();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CacheAllocatorMetadata(apache::thrift::FragileConstructor, ::std::int64_t allocatorVersion__arg, ::std::int64_t cacheCreationTime__arg, ::std::int64_t accessType__arg, ::std::int64_t mmType__arg, ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>> fragmentationSize__arg, ::std::vector<::std::int8_t> compactCachePools__arg, ::std::int64_t numPermanentItems__arg, ::std::int64_t numChainedParentItems__arg, ::std::int64_t numChainedChildItems__arg, ::std::int64_t ramFormatVersion__arg, ::std::int64_t numAbortedSlabReleases__arg);

  CacheAllocatorMetadata(CacheAllocatorMetadata&&) noexcept;

  CacheAllocatorMetadata(const CacheAllocatorMetadata& src);


  CacheAllocatorMetadata& operator=(CacheAllocatorMetadata&&) noexcept;
  CacheAllocatorMetadata& operator=(const CacheAllocatorMetadata& src);
  void __clear();

  ~CacheAllocatorMetadata();

 public:
  ::std::int64_t allocatorVersion;
 private:
  ::std::int64_t __fbthrift_field_cacheCreationTime;
 public:
  ::std::int64_t accessType;
 public:
  ::std::int64_t mmType;
 private:
  ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>> __fbthrift_field_fragmentationSize;
 private:
  ::std::vector<::std::int8_t> __fbthrift_field_compactCachePools;
 private:
  ::std::int64_t __fbthrift_field_numPermanentItems;
 private:
  ::std::int64_t __fbthrift_field_numChainedParentItems;
 private:
  ::std::int64_t __fbthrift_field_numChainedChildItems;
 private:
  ::std::int64_t __fbthrift_field_ramFormatVersion;
 private:
  ::std::int64_t __fbthrift_field_numAbortedSlabReleases;
 private:
  apache::thrift::detail::isset_bitset<8, false> __isset;

 public:

  bool operator==(const CacheAllocatorMetadata&) const;
  bool operator<(const CacheAllocatorMetadata&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocatorVersion_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->allocatorVersion};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocatorVersion_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->allocatorVersion)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocatorVersion_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->allocatorVersion};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocatorVersion_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->allocatorVersion)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> cacheCreationTime_ref() const& {
    return {this->__fbthrift_field_cacheCreationTime, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> cacheCreationTime_ref() const&& {
    return {std::move(this->__fbthrift_field_cacheCreationTime), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> cacheCreationTime_ref() & {
    return {this->__fbthrift_field_cacheCreationTime, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> cacheCreationTime_ref() && {
    return {std::move(this->__fbthrift_field_cacheCreationTime), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> cacheCreationTime() & {
    return cacheCreationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> cacheCreationTime() const& {
    return cacheCreationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> cacheCreationTime() && {
    return std::move(*this).cacheCreationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> cacheCreationTime() const&& {
    return std::move(*this).cacheCreationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> accessType_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->accessType};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> accessType_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->accessType)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> accessType_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->accessType};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> accessType_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->accessType)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> mmType_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->mmType};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> mmType_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->mmType)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> mmType_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->mmType};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> mmType_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->mmType)};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fragmentationSize_ref() const& {
    return {this->__fbthrift_field_fragmentationSize, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fragmentationSize_ref() const&& {
    return {std::move(this->__fbthrift_field_fragmentationSize), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fragmentationSize_ref() & {
    return {this->__fbthrift_field_fragmentationSize, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fragmentationSize_ref() && {
    return {std::move(this->__fbthrift_field_fragmentationSize), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fragmentationSize() & {
    return fragmentationSize_ref();
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fragmentationSize() const& {
    return fragmentationSize_ref();
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fragmentationSize() && {
    return std::move(*this).fragmentationSize_ref();
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fragmentationSize() const&& {
    return std::move(*this).fragmentationSize_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compactCachePools_ref() const& {
    return {this->__fbthrift_field_compactCachePools, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compactCachePools_ref() const&& {
    return {std::move(this->__fbthrift_field_compactCachePools), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compactCachePools_ref() & {
    return {this->__fbthrift_field_compactCachePools, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compactCachePools_ref() && {
    return {std::move(this->__fbthrift_field_compactCachePools), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compactCachePools() & {
    return compactCachePools_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compactCachePools() const& {
    return compactCachePools_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compactCachePools() && {
    return std::move(*this).compactCachePools_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compactCachePools() const&& {
    return std::move(*this).compactCachePools_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numPermanentItems_ref() const& {
    return {this->__fbthrift_field_numPermanentItems, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numPermanentItems_ref() const&& {
    return {std::move(this->__fbthrift_field_numPermanentItems), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numPermanentItems_ref() & {
    return {this->__fbthrift_field_numPermanentItems, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numPermanentItems_ref() && {
    return {std::move(this->__fbthrift_field_numPermanentItems), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numPermanentItems() & {
    return numPermanentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numPermanentItems() const& {
    return numPermanentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numPermanentItems() && {
    return std::move(*this).numPermanentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numPermanentItems() const&& {
    return std::move(*this).numPermanentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numChainedParentItems_ref() const& {
    return {this->__fbthrift_field_numChainedParentItems, __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numChainedParentItems_ref() const&& {
    return {std::move(this->__fbthrift_field_numChainedParentItems), __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numChainedParentItems_ref() & {
    return {this->__fbthrift_field_numChainedParentItems, __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numChainedParentItems_ref() && {
    return {std::move(this->__fbthrift_field_numChainedParentItems), __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numChainedParentItems() & {
    return numChainedParentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numChainedParentItems() const& {
    return numChainedParentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numChainedParentItems() && {
    return std::move(*this).numChainedParentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numChainedParentItems() const&& {
    return std::move(*this).numChainedParentItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numChainedChildItems_ref() const& {
    return {this->__fbthrift_field_numChainedChildItems, __isset.at(folly::index_constant<5>()), __isset.bit(folly::index_constant<5>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numChainedChildItems_ref() const&& {
    return {std::move(this->__fbthrift_field_numChainedChildItems), __isset.at(folly::index_constant<5>()), __isset.bit(folly::index_constant<5>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numChainedChildItems_ref() & {
    return {this->__fbthrift_field_numChainedChildItems, __isset.at(folly::index_constant<5>()), __isset.bit(folly::index_constant<5>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numChainedChildItems_ref() && {
    return {std::move(this->__fbthrift_field_numChainedChildItems), __isset.at(folly::index_constant<5>()), __isset.bit(folly::index_constant<5>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numChainedChildItems() & {
    return numChainedChildItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numChainedChildItems() const& {
    return numChainedChildItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numChainedChildItems() && {
    return std::move(*this).numChainedChildItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numChainedChildItems() const&& {
    return std::move(*this).numChainedChildItems_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ramFormatVersion_ref() const& {
    return {this->__fbthrift_field_ramFormatVersion, __isset.at(folly::index_constant<6>()), __isset.bit(folly::index_constant<6>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ramFormatVersion_ref() const&& {
    return {std::move(this->__fbthrift_field_ramFormatVersion), __isset.at(folly::index_constant<6>()), __isset.bit(folly::index_constant<6>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ramFormatVersion_ref() & {
    return {this->__fbthrift_field_ramFormatVersion, __isset.at(folly::index_constant<6>()), __isset.bit(folly::index_constant<6>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ramFormatVersion_ref() && {
    return {std::move(this->__fbthrift_field_ramFormatVersion), __isset.at(folly::index_constant<6>()), __isset.bit(folly::index_constant<6>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ramFormatVersion() & {
    return ramFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ramFormatVersion() const& {
    return ramFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ramFormatVersion() && {
    return std::move(*this).ramFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ramFormatVersion() const&& {
    return std::move(*this).ramFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numAbortedSlabReleases_ref() const& {
    return {this->__fbthrift_field_numAbortedSlabReleases, __isset.at(folly::index_constant<7>()), __isset.bit(folly::index_constant<7>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numAbortedSlabReleases_ref() const&& {
    return {std::move(this->__fbthrift_field_numAbortedSlabReleases), __isset.at(folly::index_constant<7>()), __isset.bit(folly::index_constant<7>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numAbortedSlabReleases_ref() & {
    return {this->__fbthrift_field_numAbortedSlabReleases, __isset.at(folly::index_constant<7>()), __isset.bit(folly::index_constant<7>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numAbortedSlabReleases_ref() && {
    return {std::move(this->__fbthrift_field_numAbortedSlabReleases), __isset.at(folly::index_constant<7>()), __isset.bit(folly::index_constant<7>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numAbortedSlabReleases() & {
    return numAbortedSlabReleases_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numAbortedSlabReleases() const& {
    return numAbortedSlabReleases_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numAbortedSlabReleases() && {
    return std::move(*this).numAbortedSlabReleases_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numAbortedSlabReleases() const&& {
    return std::move(*this).numAbortedSlabReleases_ref();
  }

  ::std::int64_t get_allocatorVersion() const {
    return allocatorVersion;
  }

  [[deprecated("Use `FOO.allocatorVersion_ref() = BAR;` instead of `FOO.set_allocatorVersion(BAR);`")]]
  ::std::int64_t& set_allocatorVersion(::std::int64_t allocatorVersion_) {
    allocatorVersion_ref() = allocatorVersion_;
    return allocatorVersion;
  }

  ::std::int64_t get_cacheCreationTime() const {
    return __fbthrift_field_cacheCreationTime;
  }

  [[deprecated("Use `FOO.cacheCreationTime_ref() = BAR;` instead of `FOO.set_cacheCreationTime(BAR);`")]]
  ::std::int64_t& set_cacheCreationTime(::std::int64_t cacheCreationTime_) {
    cacheCreationTime_ref() = cacheCreationTime_;
    return __fbthrift_field_cacheCreationTime;
  }

  ::std::int64_t get_accessType() const {
    return accessType;
  }

  [[deprecated("Use `FOO.accessType_ref() = BAR;` instead of `FOO.set_accessType(BAR);`")]]
  ::std::int64_t& set_accessType(::std::int64_t accessType_) {
    accessType_ref() = accessType_;
    return accessType;
  }

  ::std::int64_t get_mmType() const {
    return mmType;
  }

  [[deprecated("Use `FOO.mmType_ref() = BAR;` instead of `FOO.set_mmType(BAR);`")]]
  ::std::int64_t& set_mmType(::std::int64_t mmType_) {
    mmType_ref() = mmType_;
    return mmType;
  }
  const ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>& get_fragmentationSize() const&;
  ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>> get_fragmentationSize() &&;

  template <typename T_CacheAllocatorMetadata_fragmentationSize_struct_setter = ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>>
  [[deprecated("Use `FOO.fragmentationSize_ref() = BAR;` instead of `FOO.set_fragmentationSize(BAR);`")]]
  ::std::map<::std::int8_t, ::std::map<::std::int8_t, ::std::int64_t>>& set_fragmentationSize(T_CacheAllocatorMetadata_fragmentationSize_struct_setter&& fragmentationSize_) {
    fragmentationSize_ref() = std::forward<T_CacheAllocatorMetadata_fragmentationSize_struct_setter>(fragmentationSize_);
    return __fbthrift_field_fragmentationSize;
  }
  const ::std::vector<::std::int8_t>& get_compactCachePools() const&;
  ::std::vector<::std::int8_t> get_compactCachePools() &&;

  template <typename T_CacheAllocatorMetadata_compactCachePools_struct_setter = ::std::vector<::std::int8_t>>
  [[deprecated("Use `FOO.compactCachePools_ref() = BAR;` instead of `FOO.set_compactCachePools(BAR);`")]]
  ::std::vector<::std::int8_t>& set_compactCachePools(T_CacheAllocatorMetadata_compactCachePools_struct_setter&& compactCachePools_) {
    compactCachePools_ref() = std::forward<T_CacheAllocatorMetadata_compactCachePools_struct_setter>(compactCachePools_);
    return __fbthrift_field_compactCachePools;
  }

  ::std::int64_t get_numPermanentItems() const {
    return __fbthrift_field_numPermanentItems;
  }

  [[deprecated("Use `FOO.numPermanentItems_ref() = BAR;` instead of `FOO.set_numPermanentItems(BAR);`")]]
  ::std::int64_t& set_numPermanentItems(::std::int64_t numPermanentItems_) {
    numPermanentItems_ref() = numPermanentItems_;
    return __fbthrift_field_numPermanentItems;
  }

  ::std::int64_t get_numChainedParentItems() const {
    return __fbthrift_field_numChainedParentItems;
  }

  [[deprecated("Use `FOO.numChainedParentItems_ref() = BAR;` instead of `FOO.set_numChainedParentItems(BAR);`")]]
  ::std::int64_t& set_numChainedParentItems(::std::int64_t numChainedParentItems_) {
    numChainedParentItems_ref() = numChainedParentItems_;
    return __fbthrift_field_numChainedParentItems;
  }

  ::std::int64_t get_numChainedChildItems() const {
    return __fbthrift_field_numChainedChildItems;
  }

  [[deprecated("Use `FOO.numChainedChildItems_ref() = BAR;` instead of `FOO.set_numChainedChildItems(BAR);`")]]
  ::std::int64_t& set_numChainedChildItems(::std::int64_t numChainedChildItems_) {
    numChainedChildItems_ref() = numChainedChildItems_;
    return __fbthrift_field_numChainedChildItems;
  }

  ::std::int64_t get_ramFormatVersion() const {
    return __fbthrift_field_ramFormatVersion;
  }

  [[deprecated("Use `FOO.ramFormatVersion_ref() = BAR;` instead of `FOO.set_ramFormatVersion(BAR);`")]]
  ::std::int64_t& set_ramFormatVersion(::std::int64_t ramFormatVersion_) {
    ramFormatVersion_ref() = ramFormatVersion_;
    return __fbthrift_field_ramFormatVersion;
  }

  ::std::int64_t get_numAbortedSlabReleases() const {
    return __fbthrift_field_numAbortedSlabReleases;
  }

  [[deprecated("Use `FOO.numAbortedSlabReleases_ref() = BAR;` instead of `FOO.set_numAbortedSlabReleases(BAR);`")]]
  ::std::int64_t& set_numAbortedSlabReleases(::std::int64_t numAbortedSlabReleases_) {
    numAbortedSlabReleases_ref() = numAbortedSlabReleases_;
    return __fbthrift_field_numAbortedSlabReleases;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CacheAllocatorMetadata>;
  friend void swap(CacheAllocatorMetadata& a, CacheAllocatorMetadata& b);
};

template <class Protocol_>
uint32_t CacheAllocatorMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class NvmCacheMetadata final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NvmCacheMetadata;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  NvmCacheMetadata() :
      __fbthrift_field_nvmFormatVersion(static_cast<::std::int64_t>(0)),
      __fbthrift_field_creationTime(static_cast<::std::int64_t>(0)),
      __fbthrift_field_safeShutDown(static_cast<bool>(false)),
      __fbthrift_field_encryptionEnabled(static_cast<bool>(false)),
      __fbthrift_field_truncateAllocSize(static_cast<bool>(false)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NvmCacheMetadata(apache::thrift::FragileConstructor, ::std::int64_t nvmFormatVersion__arg, ::std::int64_t creationTime__arg, bool safeShutDown__arg, bool encryptionEnabled__arg, bool truncateAllocSize__arg);

  NvmCacheMetadata(NvmCacheMetadata&&) = default;

  NvmCacheMetadata(const NvmCacheMetadata&) = default;


  NvmCacheMetadata& operator=(NvmCacheMetadata&&) = default;

  NvmCacheMetadata& operator=(const NvmCacheMetadata&) = default;
  void __clear();
 private:
  ::std::int64_t __fbthrift_field_nvmFormatVersion;
 private:
  ::std::int64_t __fbthrift_field_creationTime;
 private:
  bool __fbthrift_field_safeShutDown;
 private:
  bool __fbthrift_field_encryptionEnabled;
 private:
  bool __fbthrift_field_truncateAllocSize;
 private:
  apache::thrift::detail::isset_bitset<5, false> __isset;

 public:

  bool operator==(const NvmCacheMetadata&) const;
  bool operator<(const NvmCacheMetadata&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nvmFormatVersion_ref() const& {
    return {this->__fbthrift_field_nvmFormatVersion, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nvmFormatVersion_ref() const&& {
    return {std::move(this->__fbthrift_field_nvmFormatVersion), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nvmFormatVersion_ref() & {
    return {this->__fbthrift_field_nvmFormatVersion, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nvmFormatVersion_ref() && {
    return {std::move(this->__fbthrift_field_nvmFormatVersion), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nvmFormatVersion() & {
    return nvmFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nvmFormatVersion() const& {
    return nvmFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nvmFormatVersion() && {
    return std::move(*this).nvmFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nvmFormatVersion() const&& {
    return std::move(*this).nvmFormatVersion_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> creationTime_ref() const& {
    return {this->__fbthrift_field_creationTime, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> creationTime_ref() const&& {
    return {std::move(this->__fbthrift_field_creationTime), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> creationTime_ref() & {
    return {this->__fbthrift_field_creationTime, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> creationTime_ref() && {
    return {std::move(this->__fbthrift_field_creationTime), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> creationTime() & {
    return creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> creationTime() const& {
    return creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> creationTime() && {
    return std::move(*this).creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> creationTime() const&& {
    return std::move(*this).creationTime_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> safeShutDown_ref() const& {
    return {this->__fbthrift_field_safeShutDown, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> safeShutDown_ref() const&& {
    return {std::move(this->__fbthrift_field_safeShutDown), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> safeShutDown_ref() & {
    return {this->__fbthrift_field_safeShutDown, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> safeShutDown_ref() && {
    return {std::move(this->__fbthrift_field_safeShutDown), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> safeShutDown() & {
    return safeShutDown_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> safeShutDown() const& {
    return safeShutDown_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> safeShutDown() && {
    return std::move(*this).safeShutDown_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> safeShutDown() const&& {
    return std::move(*this).safeShutDown_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encryptionEnabled_ref() const& {
    return {this->__fbthrift_field_encryptionEnabled, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encryptionEnabled_ref() const&& {
    return {std::move(this->__fbthrift_field_encryptionEnabled), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encryptionEnabled_ref() & {
    return {this->__fbthrift_field_encryptionEnabled, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encryptionEnabled_ref() && {
    return {std::move(this->__fbthrift_field_encryptionEnabled), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encryptionEnabled() & {
    return encryptionEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encryptionEnabled() const& {
    return encryptionEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encryptionEnabled() && {
    return std::move(*this).encryptionEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encryptionEnabled() const&& {
    return std::move(*this).encryptionEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> truncateAllocSize_ref() const& {
    return {this->__fbthrift_field_truncateAllocSize, __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> truncateAllocSize_ref() const&& {
    return {std::move(this->__fbthrift_field_truncateAllocSize), __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> truncateAllocSize_ref() & {
    return {this->__fbthrift_field_truncateAllocSize, __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> truncateAllocSize_ref() && {
    return {std::move(this->__fbthrift_field_truncateAllocSize), __isset.at(folly::index_constant<4>()), __isset.bit(folly::index_constant<4>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> truncateAllocSize() & {
    return truncateAllocSize_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> truncateAllocSize() const& {
    return truncateAllocSize_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> truncateAllocSize() && {
    return std::move(*this).truncateAllocSize_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> truncateAllocSize() const&& {
    return std::move(*this).truncateAllocSize_ref();
  }

  ::std::int64_t get_nvmFormatVersion() const {
    return __fbthrift_field_nvmFormatVersion;
  }

  [[deprecated("Use `FOO.nvmFormatVersion_ref() = BAR;` instead of `FOO.set_nvmFormatVersion(BAR);`")]]
  ::std::int64_t& set_nvmFormatVersion(::std::int64_t nvmFormatVersion_) {
    nvmFormatVersion_ref() = nvmFormatVersion_;
    return __fbthrift_field_nvmFormatVersion;
  }

  ::std::int64_t get_creationTime() const {
    return __fbthrift_field_creationTime;
  }

  [[deprecated("Use `FOO.creationTime_ref() = BAR;` instead of `FOO.set_creationTime(BAR);`")]]
  ::std::int64_t& set_creationTime(::std::int64_t creationTime_) {
    creationTime_ref() = creationTime_;
    return __fbthrift_field_creationTime;
  }

  bool get_safeShutDown() const {
    return __fbthrift_field_safeShutDown;
  }

  [[deprecated("Use `FOO.safeShutDown_ref() = BAR;` instead of `FOO.set_safeShutDown(BAR);`")]]
  bool& set_safeShutDown(bool safeShutDown_) {
    safeShutDown_ref() = safeShutDown_;
    return __fbthrift_field_safeShutDown;
  }

  bool get_encryptionEnabled() const {
    return __fbthrift_field_encryptionEnabled;
  }

  [[deprecated("Use `FOO.encryptionEnabled_ref() = BAR;` instead of `FOO.set_encryptionEnabled(BAR);`")]]
  bool& set_encryptionEnabled(bool encryptionEnabled_) {
    encryptionEnabled_ref() = encryptionEnabled_;
    return __fbthrift_field_encryptionEnabled;
  }

  bool get_truncateAllocSize() const {
    return __fbthrift_field_truncateAllocSize;
  }

  [[deprecated("Use `FOO.truncateAllocSize_ref() = BAR;` instead of `FOO.set_truncateAllocSize(BAR);`")]]
  bool& set_truncateAllocSize(bool truncateAllocSize_) {
    truncateAllocSize_ref() = truncateAllocSize_;
    return __fbthrift_field_truncateAllocSize;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NvmCacheMetadata>;
  friend void swap(NvmCacheMetadata& a, NvmCacheMetadata& b);
};

template <class Protocol_>
uint32_t NvmCacheMetadata::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class CompactCacheMetadataObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = CompactCacheMetadataObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CompactCacheMetadataObject() :
      keySize(),
      valueSize() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompactCacheMetadataObject(apache::thrift::FragileConstructor, ::std::int64_t keySize__arg, ::std::int64_t valueSize__arg);

  CompactCacheMetadataObject(CompactCacheMetadataObject&&) = default;

  CompactCacheMetadataObject(const CompactCacheMetadataObject&) = default;


  CompactCacheMetadataObject& operator=(CompactCacheMetadataObject&&) = default;

  CompactCacheMetadataObject& operator=(const CompactCacheMetadataObject&) = default;
  void __clear();
 public:
  ::std::int64_t keySize;
 public:
  ::std::int64_t valueSize;

 public:

  bool operator==(const CompactCacheMetadataObject&) const;
  bool operator<(const CompactCacheMetadataObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> keySize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->keySize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> keySize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->keySize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> keySize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->keySize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> keySize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->keySize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> valueSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->valueSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> valueSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->valueSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> valueSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->valueSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> valueSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->valueSize)};
  }

  ::std::int64_t get_keySize() const {
    return keySize;
  }

  [[deprecated("Use `FOO.keySize_ref() = BAR;` instead of `FOO.set_keySize(BAR);`")]]
  ::std::int64_t& set_keySize(::std::int64_t keySize_) {
    keySize_ref() = keySize_;
    return keySize;
  }

  ::std::int64_t get_valueSize() const {
    return valueSize;
  }

  [[deprecated("Use `FOO.valueSize_ref() = BAR;` instead of `FOO.set_valueSize(BAR);`")]]
  ::std::int64_t& set_valueSize(::std::int64_t valueSize_) {
    valueSize_ref() = valueSize_;
    return valueSize;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompactCacheMetadataObject>;
  friend void swap(CompactCacheMetadataObject& a, CompactCacheMetadataObject& b);
};

template <class Protocol_>
uint32_t CompactCacheMetadataObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class CompactCacheAllocatorObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = CompactCacheAllocatorObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CompactCacheAllocatorObject() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompactCacheAllocatorObject(apache::thrift::FragileConstructor, ::std::vector<::std::int64_t> chunks__arg, ::facebook::cachelib::serialization::CompactCacheMetadataObject ccMetadata__arg);

  CompactCacheAllocatorObject(CompactCacheAllocatorObject&&) noexcept;

  CompactCacheAllocatorObject(const CompactCacheAllocatorObject& src);


  CompactCacheAllocatorObject& operator=(CompactCacheAllocatorObject&&) noexcept;
  CompactCacheAllocatorObject& operator=(const CompactCacheAllocatorObject& src);
  void __clear();
 public:
  ::std::vector<::std::int64_t> chunks;
 public:
  ::facebook::cachelib::serialization::CompactCacheMetadataObject ccMetadata;

 public:

  bool operator==(const CompactCacheAllocatorObject&) const;
  bool operator<(const CompactCacheAllocatorObject&) const;

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> chunks_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->chunks};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> chunks_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->chunks)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> chunks_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->chunks};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> chunks_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->chunks)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::CompactCacheMetadataObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> ccMetadata_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->ccMetadata};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::CompactCacheMetadataObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> ccMetadata_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->ccMetadata)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::CompactCacheMetadataObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> ccMetadata_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->ccMetadata};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::CompactCacheMetadataObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> ccMetadata_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->ccMetadata)};
  }
  const ::std::vector<::std::int64_t>& get_chunks() const&;
  ::std::vector<::std::int64_t> get_chunks() &&;

  template <typename T_CompactCacheAllocatorObject_chunks_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.chunks_ref() = BAR;` instead of `FOO.set_chunks(BAR);`")]]
  ::std::vector<::std::int64_t>& set_chunks(T_CompactCacheAllocatorObject_chunks_struct_setter&& chunks_) {
    chunks_ref() = std::forward<T_CompactCacheAllocatorObject_chunks_struct_setter>(chunks_);
    return chunks;
  }
  const ::facebook::cachelib::serialization::CompactCacheMetadataObject& get_ccMetadata() const&;
  ::facebook::cachelib::serialization::CompactCacheMetadataObject get_ccMetadata() &&;

  template <typename T_CompactCacheAllocatorObject_ccMetadata_struct_setter = ::facebook::cachelib::serialization::CompactCacheMetadataObject>
  [[deprecated("Use `FOO.ccMetadata_ref() = BAR;` instead of `FOO.set_ccMetadata(BAR);`")]]
  ::facebook::cachelib::serialization::CompactCacheMetadataObject& set_ccMetadata(T_CompactCacheAllocatorObject_ccMetadata_struct_setter&& ccMetadata_) {
    ccMetadata_ref() = std::forward<T_CompactCacheAllocatorObject_ccMetadata_struct_setter>(ccMetadata_);
    return ccMetadata;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompactCacheAllocatorObject>;
  friend void swap(CompactCacheAllocatorObject& a, CompactCacheAllocatorObject& b);
};

template <class Protocol_>
uint32_t CompactCacheAllocatorObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class CompactCacheAllocatorManagerObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = CompactCacheAllocatorManagerObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CompactCacheAllocatorManagerObject() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CompactCacheAllocatorManagerObject(apache::thrift::FragileConstructor, ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject> allocators__arg);

  CompactCacheAllocatorManagerObject(CompactCacheAllocatorManagerObject&&) noexcept;

  CompactCacheAllocatorManagerObject(const CompactCacheAllocatorManagerObject& src);


  CompactCacheAllocatorManagerObject& operator=(CompactCacheAllocatorManagerObject&&) noexcept;
  CompactCacheAllocatorManagerObject& operator=(const CompactCacheAllocatorManagerObject& src);
  void __clear();
 public:
  ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject> allocators;

 public:

  bool operator==(const CompactCacheAllocatorManagerObject&) const;
  bool operator<(const CompactCacheAllocatorManagerObject&) const;

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocators_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->allocators};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocators_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->allocators)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocators_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->allocators};
  }

  template <typename..., typename T = ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocators_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->allocators)};
  }
  const ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>& get_allocators() const&;
  ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject> get_allocators() &&;

  template <typename T_CompactCacheAllocatorManagerObject_allocators_struct_setter = ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>>
  [[deprecated("Use `FOO.allocators_ref() = BAR;` instead of `FOO.set_allocators(BAR);`")]]
  ::std::map<::std::string, ::facebook::cachelib::serialization::CompactCacheAllocatorObject>& set_allocators(T_CompactCacheAllocatorManagerObject_allocators_struct_setter&& allocators_) {
    allocators_ref() = std::forward<T_CompactCacheAllocatorManagerObject_allocators_struct_setter>(allocators_);
    return allocators;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CompactCacheAllocatorManagerObject>;
  friend void swap(CompactCacheAllocatorManagerObject& a, CompactCacheAllocatorManagerObject& b);
};

template <class Protocol_>
uint32_t CompactCacheAllocatorManagerObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMLruConfig final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMLruConfig;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMLruConfig() :
      lruRefreshTime(),
      updateOnWrite(),
      lruInsertionPointSpec(),
      __fbthrift_field_updateOnRead(static_cast<bool>(true)),
      __fbthrift_field_tryLockUpdate(static_cast<bool>(false)),
      __fbthrift_field_lruRefreshRatio(static_cast<double>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMLruConfig(apache::thrift::FragileConstructor, ::std::int32_t lruRefreshTime__arg, bool updateOnWrite__arg, ::std::int32_t lruInsertionPointSpec__arg, bool updateOnRead__arg, bool tryLockUpdate__arg, double lruRefreshRatio__arg);

  MMLruConfig(MMLruConfig&&) = default;

  MMLruConfig(const MMLruConfig&) = default;


  MMLruConfig& operator=(MMLruConfig&&) = default;

  MMLruConfig& operator=(const MMLruConfig&) = default;
  void __clear();
 public:
  ::std::int32_t lruRefreshTime;
 public:
  bool updateOnWrite;
 public:
  ::std::int32_t lruInsertionPointSpec;
 private:
  bool __fbthrift_field_updateOnRead;
 private:
  bool __fbthrift_field_tryLockUpdate;
 private:
  double __fbthrift_field_lruRefreshRatio;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const MMLruConfig&) const;
  bool operator<(const MMLruConfig&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lruRefreshTime_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lruRefreshTime_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lruRefreshTime_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lruRefreshTime_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> updateOnWrite_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> updateOnWrite_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> updateOnWrite_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> updateOnWrite_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lruInsertionPointSpec_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lruInsertionPointSpec};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lruInsertionPointSpec_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lruInsertionPointSpec)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lruInsertionPointSpec_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lruInsertionPointSpec};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lruInsertionPointSpec_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lruInsertionPointSpec)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead_ref() const& {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead_ref() const&& {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead_ref() & {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead_ref() && {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead() & {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead() const& {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead() && {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead() const&& {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate_ref() const& {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate_ref() const&& {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate_ref() & {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate_ref() && {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate() & {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate() const& {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate() && {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate() const&& {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio_ref() const& {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio_ref() const&& {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio_ref() & {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio_ref() && {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio() & {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio() const& {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio() && {
    return std::move(*this).lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio() const&& {
    return std::move(*this).lruRefreshRatio_ref();
  }

  ::std::int32_t get_lruRefreshTime() const {
    return lruRefreshTime;
  }

  [[deprecated("Use `FOO.lruRefreshTime_ref() = BAR;` instead of `FOO.set_lruRefreshTime(BAR);`")]]
  ::std::int32_t& set_lruRefreshTime(::std::int32_t lruRefreshTime_) {
    lruRefreshTime_ref() = lruRefreshTime_;
    return lruRefreshTime;
  }

  bool get_updateOnWrite() const {
    return updateOnWrite;
  }

  [[deprecated("Use `FOO.updateOnWrite_ref() = BAR;` instead of `FOO.set_updateOnWrite(BAR);`")]]
  bool& set_updateOnWrite(bool updateOnWrite_) {
    updateOnWrite_ref() = updateOnWrite_;
    return updateOnWrite;
  }

  ::std::int32_t get_lruInsertionPointSpec() const {
    return lruInsertionPointSpec;
  }

  [[deprecated("Use `FOO.lruInsertionPointSpec_ref() = BAR;` instead of `FOO.set_lruInsertionPointSpec(BAR);`")]]
  ::std::int32_t& set_lruInsertionPointSpec(::std::int32_t lruInsertionPointSpec_) {
    lruInsertionPointSpec_ref() = lruInsertionPointSpec_;
    return lruInsertionPointSpec;
  }

  bool get_updateOnRead() const {
    return __fbthrift_field_updateOnRead;
  }

  [[deprecated("Use `FOO.updateOnRead_ref() = BAR;` instead of `FOO.set_updateOnRead(BAR);`")]]
  bool& set_updateOnRead(bool updateOnRead_) {
    updateOnRead_ref() = updateOnRead_;
    return __fbthrift_field_updateOnRead;
  }

  bool get_tryLockUpdate() const {
    return __fbthrift_field_tryLockUpdate;
  }

  [[deprecated("Use `FOO.tryLockUpdate_ref() = BAR;` instead of `FOO.set_tryLockUpdate(BAR);`")]]
  bool& set_tryLockUpdate(bool tryLockUpdate_) {
    tryLockUpdate_ref() = tryLockUpdate_;
    return __fbthrift_field_tryLockUpdate;
  }

  double get_lruRefreshRatio() const {
    return __fbthrift_field_lruRefreshRatio;
  }

  [[deprecated("Use `FOO.lruRefreshRatio_ref() = BAR;` instead of `FOO.set_lruRefreshRatio(BAR);`")]]
  double& set_lruRefreshRatio(double lruRefreshRatio_) {
    lruRefreshRatio_ref() = lruRefreshRatio_;
    return __fbthrift_field_lruRefreshRatio;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMLruConfig>;
  friend void swap(MMLruConfig& a, MMLruConfig& b);
};

template <class Protocol_>
uint32_t MMLruConfig::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMLruObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMLruObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMLruObject() :
      __fbthrift_field_evictions(static_cast<::std::int64_t>(0)),
      insertionPoint(),
      tailSize(),
      compressedInsertionPoint() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMLruObject(apache::thrift::FragileConstructor, ::facebook::cachelib::serialization::MMLruConfig config__arg, ::std::int64_t evictions__arg, ::std::int64_t insertionPoint__arg, ::std::int64_t tailSize__arg, ::facebook::cachelib::serialization::DListObject lru__arg, ::std::int64_t compressedInsertionPoint__arg);

  MMLruObject(MMLruObject&&) = default;

  MMLruObject(const MMLruObject&) = default;


  MMLruObject& operator=(MMLruObject&&) = default;

  MMLruObject& operator=(const MMLruObject&) = default;
  void __clear();
 public:
  ::facebook::cachelib::serialization::MMLruConfig config;
 private:
  ::std::int64_t __fbthrift_field_evictions;
 public:
  ::std::int64_t insertionPoint;
 public:
  ::std::int64_t tailSize;
 public:
  ::facebook::cachelib::serialization::DListObject lru;
 public:
  ::std::int64_t compressedInsertionPoint;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const MMLruObject&) const;
  bool operator<(const MMLruObject&) const;

  template <typename..., typename T = ::facebook::cachelib::serialization::MMLruConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> config_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMLruConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> config_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->config)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMLruConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> config_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMLruConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> config_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->config)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions_ref() const& {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions_ref() const&& {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions_ref() & {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions_ref() && {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions() & {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions() const& {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions() && {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions() const&& {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> insertionPoint_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->insertionPoint};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> insertionPoint_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->insertionPoint)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> insertionPoint_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->insertionPoint};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> insertionPoint_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->insertionPoint)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> tailSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->tailSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> tailSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->tailSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> tailSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->tailSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> tailSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->tailSize)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lru_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lru};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lru_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lru)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lru_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lru};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lru_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lru)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedInsertionPoint_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->compressedInsertionPoint};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedInsertionPoint_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->compressedInsertionPoint)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedInsertionPoint_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->compressedInsertionPoint};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedInsertionPoint_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->compressedInsertionPoint)};
  }
  const ::facebook::cachelib::serialization::MMLruConfig& get_config() const&;
  ::facebook::cachelib::serialization::MMLruConfig get_config() &&;

  template <typename T_MMLruObject_config_struct_setter = ::facebook::cachelib::serialization::MMLruConfig>
  [[deprecated("Use `FOO.config_ref() = BAR;` instead of `FOO.set_config(BAR);`")]]
  ::facebook::cachelib::serialization::MMLruConfig& set_config(T_MMLruObject_config_struct_setter&& config_) {
    config_ref() = std::forward<T_MMLruObject_config_struct_setter>(config_);
    return config;
  }

  ::std::int64_t get_evictions() const {
    return __fbthrift_field_evictions;
  }

  [[deprecated("Use `FOO.evictions_ref() = BAR;` instead of `FOO.set_evictions(BAR);`")]]
  ::std::int64_t& set_evictions(::std::int64_t evictions_) {
    evictions_ref() = evictions_;
    return __fbthrift_field_evictions;
  }

  ::std::int64_t get_insertionPoint() const {
    return insertionPoint;
  }

  [[deprecated("Use `FOO.insertionPoint_ref() = BAR;` instead of `FOO.set_insertionPoint(BAR);`")]]
  ::std::int64_t& set_insertionPoint(::std::int64_t insertionPoint_) {
    insertionPoint_ref() = insertionPoint_;
    return insertionPoint;
  }

  ::std::int64_t get_tailSize() const {
    return tailSize;
  }

  [[deprecated("Use `FOO.tailSize_ref() = BAR;` instead of `FOO.set_tailSize(BAR);`")]]
  ::std::int64_t& set_tailSize(::std::int64_t tailSize_) {
    tailSize_ref() = tailSize_;
    return tailSize;
  }
  const ::facebook::cachelib::serialization::DListObject& get_lru() const&;
  ::facebook::cachelib::serialization::DListObject get_lru() &&;

  template <typename T_MMLruObject_lru_struct_setter = ::facebook::cachelib::serialization::DListObject>
  [[deprecated("Use `FOO.lru_ref() = BAR;` instead of `FOO.set_lru(BAR);`")]]
  ::facebook::cachelib::serialization::DListObject& set_lru(T_MMLruObject_lru_struct_setter&& lru_) {
    lru_ref() = std::forward<T_MMLruObject_lru_struct_setter>(lru_);
    return lru;
  }

  ::std::int64_t get_compressedInsertionPoint() const {
    return compressedInsertionPoint;
  }

  [[deprecated("Use `FOO.compressedInsertionPoint_ref() = BAR;` instead of `FOO.set_compressedInsertionPoint(BAR);`")]]
  ::std::int64_t& set_compressedInsertionPoint(::std::int64_t compressedInsertionPoint_) {
    compressedInsertionPoint_ref() = compressedInsertionPoint_;
    return compressedInsertionPoint;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMLruObject>;
  friend void swap(MMLruObject& a, MMLruObject& b);
};

template <class Protocol_>
uint32_t MMLruObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMLruCollection final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMLruCollection;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMLruCollection() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMLruCollection(apache::thrift::FragileConstructor, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>> pools__arg);

  MMLruCollection(MMLruCollection&&) noexcept;

  MMLruCollection(const MMLruCollection& src);


  MMLruCollection& operator=(MMLruCollection&&) noexcept;
  MMLruCollection& operator=(const MMLruCollection& src);
  void __clear();
 public:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>> pools;

 public:

  bool operator==(const MMLruCollection&) const;
  bool operator<(const MMLruCollection&) const;

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> pools_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> pools_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->pools)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> pools_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> pools_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->pools)};
  }
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>& get_pools() const&;
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>> get_pools() &&;

  template <typename T_MMLruCollection_pools_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>>
  [[deprecated("Use `FOO.pools_ref() = BAR;` instead of `FOO.set_pools(BAR);`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMLruObject>>& set_pools(T_MMLruCollection_pools_struct_setter&& pools_) {
    pools_ref() = std::forward<T_MMLruCollection_pools_struct_setter>(pools_);
    return pools;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMLruCollection>;
  friend void swap(MMLruCollection& a, MMLruCollection& b);
};

template <class Protocol_>
uint32_t MMLruCollection::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MM2QConfig final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MM2QConfig;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MM2QConfig() :
      lruRefreshTime(),
      updateOnWrite(),
      hotSizePercent(),
      coldSizePercent(),
      __fbthrift_field_updateOnRead(static_cast<bool>(true)),
      __fbthrift_field_tryLockUpdate(static_cast<bool>(false)),
      __fbthrift_field_rebalanceOnRecordAccess(static_cast<bool>(true)),
      __fbthrift_field_lruRefreshRatio(static_cast<double>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MM2QConfig(apache::thrift::FragileConstructor, ::std::int32_t lruRefreshTime__arg, bool updateOnWrite__arg, ::std::int32_t hotSizePercent__arg, ::std::int32_t coldSizePercent__arg, bool updateOnRead__arg, bool tryLockUpdate__arg, bool rebalanceOnRecordAccess__arg, double lruRefreshRatio__arg);

  MM2QConfig(MM2QConfig&&) = default;

  MM2QConfig(const MM2QConfig&) = default;


  MM2QConfig& operator=(MM2QConfig&&) = default;

  MM2QConfig& operator=(const MM2QConfig&) = default;
  void __clear();
 public:
  ::std::int32_t lruRefreshTime;
 public:
  bool updateOnWrite;
 public:
  ::std::int32_t hotSizePercent;
 public:
  ::std::int32_t coldSizePercent;
 private:
  bool __fbthrift_field_updateOnRead;
 private:
  bool __fbthrift_field_tryLockUpdate;
 private:
  bool __fbthrift_field_rebalanceOnRecordAccess;
 private:
  double __fbthrift_field_lruRefreshRatio;
 private:
  apache::thrift::detail::isset_bitset<4, false> __isset;

 public:

  bool operator==(const MM2QConfig&) const;
  bool operator<(const MM2QConfig&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lruRefreshTime_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lruRefreshTime_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lruRefreshTime_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lruRefreshTime_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> updateOnWrite_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> updateOnWrite_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> updateOnWrite_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> updateOnWrite_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> hotSizePercent_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->hotSizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> hotSizePercent_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->hotSizePercent)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> hotSizePercent_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->hotSizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> hotSizePercent_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->hotSizePercent)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> coldSizePercent_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->coldSizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> coldSizePercent_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->coldSizePercent)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> coldSizePercent_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->coldSizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> coldSizePercent_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->coldSizePercent)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead_ref() const& {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead_ref() const&& {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead_ref() & {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead_ref() && {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead() & {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead() const& {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead() && {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead() const&& {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate_ref() const& {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate_ref() const&& {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate_ref() & {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate_ref() && {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate() & {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate() const& {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate() && {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate() const&& {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> rebalanceOnRecordAccess_ref() const& {
    return {this->__fbthrift_field_rebalanceOnRecordAccess, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> rebalanceOnRecordAccess_ref() const&& {
    return {std::move(this->__fbthrift_field_rebalanceOnRecordAccess), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> rebalanceOnRecordAccess_ref() & {
    return {this->__fbthrift_field_rebalanceOnRecordAccess, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> rebalanceOnRecordAccess_ref() && {
    return {std::move(this->__fbthrift_field_rebalanceOnRecordAccess), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> rebalanceOnRecordAccess() & {
    return rebalanceOnRecordAccess_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> rebalanceOnRecordAccess() const& {
    return rebalanceOnRecordAccess_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> rebalanceOnRecordAccess() && {
    return std::move(*this).rebalanceOnRecordAccess_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> rebalanceOnRecordAccess() const&& {
    return std::move(*this).rebalanceOnRecordAccess_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio_ref() const& {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio_ref() const&& {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio_ref() & {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio_ref() && {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<3>()), __isset.bit(folly::index_constant<3>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio() & {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio() const& {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio() && {
    return std::move(*this).lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio() const&& {
    return std::move(*this).lruRefreshRatio_ref();
  }

  ::std::int32_t get_lruRefreshTime() const {
    return lruRefreshTime;
  }

  [[deprecated("Use `FOO.lruRefreshTime_ref() = BAR;` instead of `FOO.set_lruRefreshTime(BAR);`")]]
  ::std::int32_t& set_lruRefreshTime(::std::int32_t lruRefreshTime_) {
    lruRefreshTime_ref() = lruRefreshTime_;
    return lruRefreshTime;
  }

  bool get_updateOnWrite() const {
    return updateOnWrite;
  }

  [[deprecated("Use `FOO.updateOnWrite_ref() = BAR;` instead of `FOO.set_updateOnWrite(BAR);`")]]
  bool& set_updateOnWrite(bool updateOnWrite_) {
    updateOnWrite_ref() = updateOnWrite_;
    return updateOnWrite;
  }

  ::std::int32_t get_hotSizePercent() const {
    return hotSizePercent;
  }

  [[deprecated("Use `FOO.hotSizePercent_ref() = BAR;` instead of `FOO.set_hotSizePercent(BAR);`")]]
  ::std::int32_t& set_hotSizePercent(::std::int32_t hotSizePercent_) {
    hotSizePercent_ref() = hotSizePercent_;
    return hotSizePercent;
  }

  ::std::int32_t get_coldSizePercent() const {
    return coldSizePercent;
  }

  [[deprecated("Use `FOO.coldSizePercent_ref() = BAR;` instead of `FOO.set_coldSizePercent(BAR);`")]]
  ::std::int32_t& set_coldSizePercent(::std::int32_t coldSizePercent_) {
    coldSizePercent_ref() = coldSizePercent_;
    return coldSizePercent;
  }

  bool get_updateOnRead() const {
    return __fbthrift_field_updateOnRead;
  }

  [[deprecated("Use `FOO.updateOnRead_ref() = BAR;` instead of `FOO.set_updateOnRead(BAR);`")]]
  bool& set_updateOnRead(bool updateOnRead_) {
    updateOnRead_ref() = updateOnRead_;
    return __fbthrift_field_updateOnRead;
  }

  bool get_tryLockUpdate() const {
    return __fbthrift_field_tryLockUpdate;
  }

  [[deprecated("Use `FOO.tryLockUpdate_ref() = BAR;` instead of `FOO.set_tryLockUpdate(BAR);`")]]
  bool& set_tryLockUpdate(bool tryLockUpdate_) {
    tryLockUpdate_ref() = tryLockUpdate_;
    return __fbthrift_field_tryLockUpdate;
  }

  bool get_rebalanceOnRecordAccess() const {
    return __fbthrift_field_rebalanceOnRecordAccess;
  }

  [[deprecated("Use `FOO.rebalanceOnRecordAccess_ref() = BAR;` instead of `FOO.set_rebalanceOnRecordAccess(BAR);`")]]
  bool& set_rebalanceOnRecordAccess(bool rebalanceOnRecordAccess_) {
    rebalanceOnRecordAccess_ref() = rebalanceOnRecordAccess_;
    return __fbthrift_field_rebalanceOnRecordAccess;
  }

  double get_lruRefreshRatio() const {
    return __fbthrift_field_lruRefreshRatio;
  }

  [[deprecated("Use `FOO.lruRefreshRatio_ref() = BAR;` instead of `FOO.set_lruRefreshRatio(BAR);`")]]
  double& set_lruRefreshRatio(double lruRefreshRatio_) {
    lruRefreshRatio_ref() = lruRefreshRatio_;
    return __fbthrift_field_lruRefreshRatio;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MM2QConfig>;
  friend void swap(MM2QConfig& a, MM2QConfig& b);
};

template <class Protocol_>
uint32_t MM2QConfig::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MM2QObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MM2QObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MM2QObject() :
      __fbthrift_field_tailTrackingEnabled(static_cast<bool>(false)),
      __fbthrift_field_evictions(static_cast<::std::int64_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MM2QObject(apache::thrift::FragileConstructor, ::facebook::cachelib::serialization::MM2QConfig config__arg, bool tailTrackingEnabled__arg, ::std::int64_t evictions__arg, ::facebook::cachelib::serialization::MultiDListObject lrus__arg);

  MM2QObject(MM2QObject&&) noexcept;

  MM2QObject(const MM2QObject& src);


  MM2QObject& operator=(MM2QObject&&) noexcept;
  MM2QObject& operator=(const MM2QObject& src);
  void __clear();
 public:
  ::facebook::cachelib::serialization::MM2QConfig config;
 private:
  bool __fbthrift_field_tailTrackingEnabled;
 private:
  ::std::int64_t __fbthrift_field_evictions;
 public:
  ::facebook::cachelib::serialization::MultiDListObject lrus;
 private:
  apache::thrift::detail::isset_bitset<2, false> __isset;

 public:

  bool operator==(const MM2QObject&) const;
  bool operator<(const MM2QObject&) const;

  template <typename..., typename T = ::facebook::cachelib::serialization::MM2QConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> config_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MM2QConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> config_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->config)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MM2QConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> config_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MM2QConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> config_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->config)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tailTrackingEnabled_ref() const& {
    return {this->__fbthrift_field_tailTrackingEnabled, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tailTrackingEnabled_ref() const&& {
    return {std::move(this->__fbthrift_field_tailTrackingEnabled), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tailTrackingEnabled_ref() & {
    return {this->__fbthrift_field_tailTrackingEnabled, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tailTrackingEnabled_ref() && {
    return {std::move(this->__fbthrift_field_tailTrackingEnabled), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tailTrackingEnabled() & {
    return tailTrackingEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tailTrackingEnabled() const& {
    return tailTrackingEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tailTrackingEnabled() && {
    return std::move(*this).tailTrackingEnabled_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tailTrackingEnabled() const&& {
    return std::move(*this).tailTrackingEnabled_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions_ref() const& {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions_ref() const&& {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions_ref() & {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions_ref() && {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions() & {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions() const& {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions() && {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions() const&& {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lrus_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lrus};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lrus_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lrus)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lrus_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lrus};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lrus_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lrus)};
  }
  const ::facebook::cachelib::serialization::MM2QConfig& get_config() const&;
  ::facebook::cachelib::serialization::MM2QConfig get_config() &&;

  template <typename T_MM2QObject_config_struct_setter = ::facebook::cachelib::serialization::MM2QConfig>
  [[deprecated("Use `FOO.config_ref() = BAR;` instead of `FOO.set_config(BAR);`")]]
  ::facebook::cachelib::serialization::MM2QConfig& set_config(T_MM2QObject_config_struct_setter&& config_) {
    config_ref() = std::forward<T_MM2QObject_config_struct_setter>(config_);
    return config;
  }

  bool get_tailTrackingEnabled() const {
    return __fbthrift_field_tailTrackingEnabled;
  }

  [[deprecated("Use `FOO.tailTrackingEnabled_ref() = BAR;` instead of `FOO.set_tailTrackingEnabled(BAR);`")]]
  bool& set_tailTrackingEnabled(bool tailTrackingEnabled_) {
    tailTrackingEnabled_ref() = tailTrackingEnabled_;
    return __fbthrift_field_tailTrackingEnabled;
  }

  ::std::int64_t get_evictions() const {
    return __fbthrift_field_evictions;
  }

  [[deprecated("Use `FOO.evictions_ref() = BAR;` instead of `FOO.set_evictions(BAR);`")]]
  ::std::int64_t& set_evictions(::std::int64_t evictions_) {
    evictions_ref() = evictions_;
    return __fbthrift_field_evictions;
  }
  const ::facebook::cachelib::serialization::MultiDListObject& get_lrus() const&;
  ::facebook::cachelib::serialization::MultiDListObject get_lrus() &&;

  template <typename T_MM2QObject_lrus_struct_setter = ::facebook::cachelib::serialization::MultiDListObject>
  [[deprecated("Use `FOO.lrus_ref() = BAR;` instead of `FOO.set_lrus(BAR);`")]]
  ::facebook::cachelib::serialization::MultiDListObject& set_lrus(T_MM2QObject_lrus_struct_setter&& lrus_) {
    lrus_ref() = std::forward<T_MM2QObject_lrus_struct_setter>(lrus_);
    return lrus;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MM2QObject>;
  friend void swap(MM2QObject& a, MM2QObject& b);
};

template <class Protocol_>
uint32_t MM2QObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MM2QCollection final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MM2QCollection;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MM2QCollection() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MM2QCollection(apache::thrift::FragileConstructor, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>> pools__arg);

  MM2QCollection(MM2QCollection&&) noexcept;

  MM2QCollection(const MM2QCollection& src);


  MM2QCollection& operator=(MM2QCollection&&) noexcept;
  MM2QCollection& operator=(const MM2QCollection& src);
  void __clear();
 public:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>> pools;

 public:

  bool operator==(const MM2QCollection&) const;
  bool operator<(const MM2QCollection&) const;

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> pools_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> pools_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->pools)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> pools_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> pools_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->pools)};
  }
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>& get_pools() const&;
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>> get_pools() &&;

  template <typename T_MM2QCollection_pools_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>>
  [[deprecated("Use `FOO.pools_ref() = BAR;` instead of `FOO.set_pools(BAR);`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MM2QObject>>& set_pools(T_MM2QCollection_pools_struct_setter&& pools_) {
    pools_ref() = std::forward<T_MM2QCollection_pools_struct_setter>(pools_);
    return pools;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MM2QCollection>;
  friend void swap(MM2QCollection& a, MM2QCollection& b);
};

template <class Protocol_>
uint32_t MM2QCollection::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMTinyLFUConfig final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMTinyLFUConfig;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMTinyLFUConfig() :
      lruRefreshTime(),
      updateOnWrite(),
      windowToCacheSizeRatio(),
      tinySizePercent(),
      __fbthrift_field_updateOnRead(static_cast<bool>(true)),
      __fbthrift_field_tryLockUpdate(static_cast<bool>(false)),
      __fbthrift_field_lruRefreshRatio(static_cast<double>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMTinyLFUConfig(apache::thrift::FragileConstructor, ::std::int32_t lruRefreshTime__arg, bool updateOnWrite__arg, ::std::int32_t windowToCacheSizeRatio__arg, ::std::int32_t tinySizePercent__arg, bool updateOnRead__arg, bool tryLockUpdate__arg, double lruRefreshRatio__arg);

  MMTinyLFUConfig(MMTinyLFUConfig&&) = default;

  MMTinyLFUConfig(const MMTinyLFUConfig&) = default;


  MMTinyLFUConfig& operator=(MMTinyLFUConfig&&) = default;

  MMTinyLFUConfig& operator=(const MMTinyLFUConfig&) = default;
  void __clear();
 public:
  ::std::int32_t lruRefreshTime;
 public:
  bool updateOnWrite;
 public:
  ::std::int32_t windowToCacheSizeRatio;
 public:
  ::std::int32_t tinySizePercent;
 private:
  bool __fbthrift_field_updateOnRead;
 private:
  bool __fbthrift_field_tryLockUpdate;
 private:
  double __fbthrift_field_lruRefreshRatio;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const MMTinyLFUConfig&) const;
  bool operator<(const MMTinyLFUConfig&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lruRefreshTime_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lruRefreshTime_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lruRefreshTime_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lruRefreshTime};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lruRefreshTime_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lruRefreshTime)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> updateOnWrite_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> updateOnWrite_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> updateOnWrite_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->updateOnWrite};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> updateOnWrite_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->updateOnWrite)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> windowToCacheSizeRatio_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->windowToCacheSizeRatio};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> windowToCacheSizeRatio_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->windowToCacheSizeRatio)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> windowToCacheSizeRatio_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->windowToCacheSizeRatio};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> windowToCacheSizeRatio_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->windowToCacheSizeRatio)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> tinySizePercent_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->tinySizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> tinySizePercent_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->tinySizePercent)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> tinySizePercent_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->tinySizePercent};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> tinySizePercent_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->tinySizePercent)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead_ref() const& {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead_ref() const&& {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead_ref() & {
    return {this->__fbthrift_field_updateOnRead, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead_ref() && {
    return {std::move(this->__fbthrift_field_updateOnRead), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> updateOnRead() & {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> updateOnRead() const& {
    return updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> updateOnRead() && {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> updateOnRead() const&& {
    return std::move(*this).updateOnRead_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate_ref() const& {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate_ref() const&& {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate_ref() & {
    return {this->__fbthrift_field_tryLockUpdate, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate_ref() && {
    return {std::move(this->__fbthrift_field_tryLockUpdate), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> tryLockUpdate() & {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> tryLockUpdate() const& {
    return tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> tryLockUpdate() && {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> tryLockUpdate() const&& {
    return std::move(*this).tryLockUpdate_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio_ref() const& {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio_ref() const&& {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio_ref() & {
    return {this->__fbthrift_field_lruRefreshRatio, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio_ref() && {
    return {std::move(this->__fbthrift_field_lruRefreshRatio), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lruRefreshRatio() & {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lruRefreshRatio() const& {
    return lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lruRefreshRatio() && {
    return std::move(*this).lruRefreshRatio_ref();
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lruRefreshRatio() const&& {
    return std::move(*this).lruRefreshRatio_ref();
  }

  ::std::int32_t get_lruRefreshTime() const {
    return lruRefreshTime;
  }

  [[deprecated("Use `FOO.lruRefreshTime_ref() = BAR;` instead of `FOO.set_lruRefreshTime(BAR);`")]]
  ::std::int32_t& set_lruRefreshTime(::std::int32_t lruRefreshTime_) {
    lruRefreshTime_ref() = lruRefreshTime_;
    return lruRefreshTime;
  }

  bool get_updateOnWrite() const {
    return updateOnWrite;
  }

  [[deprecated("Use `FOO.updateOnWrite_ref() = BAR;` instead of `FOO.set_updateOnWrite(BAR);`")]]
  bool& set_updateOnWrite(bool updateOnWrite_) {
    updateOnWrite_ref() = updateOnWrite_;
    return updateOnWrite;
  }

  ::std::int32_t get_windowToCacheSizeRatio() const {
    return windowToCacheSizeRatio;
  }

  [[deprecated("Use `FOO.windowToCacheSizeRatio_ref() = BAR;` instead of `FOO.set_windowToCacheSizeRatio(BAR);`")]]
  ::std::int32_t& set_windowToCacheSizeRatio(::std::int32_t windowToCacheSizeRatio_) {
    windowToCacheSizeRatio_ref() = windowToCacheSizeRatio_;
    return windowToCacheSizeRatio;
  }

  ::std::int32_t get_tinySizePercent() const {
    return tinySizePercent;
  }

  [[deprecated("Use `FOO.tinySizePercent_ref() = BAR;` instead of `FOO.set_tinySizePercent(BAR);`")]]
  ::std::int32_t& set_tinySizePercent(::std::int32_t tinySizePercent_) {
    tinySizePercent_ref() = tinySizePercent_;
    return tinySizePercent;
  }

  bool get_updateOnRead() const {
    return __fbthrift_field_updateOnRead;
  }

  [[deprecated("Use `FOO.updateOnRead_ref() = BAR;` instead of `FOO.set_updateOnRead(BAR);`")]]
  bool& set_updateOnRead(bool updateOnRead_) {
    updateOnRead_ref() = updateOnRead_;
    return __fbthrift_field_updateOnRead;
  }

  bool get_tryLockUpdate() const {
    return __fbthrift_field_tryLockUpdate;
  }

  [[deprecated("Use `FOO.tryLockUpdate_ref() = BAR;` instead of `FOO.set_tryLockUpdate(BAR);`")]]
  bool& set_tryLockUpdate(bool tryLockUpdate_) {
    tryLockUpdate_ref() = tryLockUpdate_;
    return __fbthrift_field_tryLockUpdate;
  }

  double get_lruRefreshRatio() const {
    return __fbthrift_field_lruRefreshRatio;
  }

  [[deprecated("Use `FOO.lruRefreshRatio_ref() = BAR;` instead of `FOO.set_lruRefreshRatio(BAR);`")]]
  double& set_lruRefreshRatio(double lruRefreshRatio_) {
    lruRefreshRatio_ref() = lruRefreshRatio_;
    return __fbthrift_field_lruRefreshRatio;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMTinyLFUConfig>;
  friend void swap(MMTinyLFUConfig& a, MMTinyLFUConfig& b);
};

template <class Protocol_>
uint32_t MMTinyLFUConfig::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMTinyLFUObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMTinyLFUObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMTinyLFUObject() :
      __fbthrift_field_evictions(static_cast<::std::int64_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMTinyLFUObject(apache::thrift::FragileConstructor, ::facebook::cachelib::serialization::MMTinyLFUConfig config__arg, ::std::int64_t evictions__arg, ::facebook::cachelib::serialization::MultiDListObject lrus__arg);

  MMTinyLFUObject(MMTinyLFUObject&&) noexcept;

  MMTinyLFUObject(const MMTinyLFUObject& src);


  MMTinyLFUObject& operator=(MMTinyLFUObject&&) noexcept;
  MMTinyLFUObject& operator=(const MMTinyLFUObject& src);
  void __clear();
 public:
  ::facebook::cachelib::serialization::MMTinyLFUConfig config;
 private:
  ::std::int64_t __fbthrift_field_evictions;
 public:
  ::facebook::cachelib::serialization::MultiDListObject lrus;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const MMTinyLFUObject&) const;
  bool operator<(const MMTinyLFUObject&) const;

  template <typename..., typename T = ::facebook::cachelib::serialization::MMTinyLFUConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> config_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMTinyLFUConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> config_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->config)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMTinyLFUConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> config_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->config};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MMTinyLFUConfig>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> config_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->config)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions_ref() const& {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions_ref() const&& {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions_ref() & {
    return {this->__fbthrift_field_evictions, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions_ref() && {
    return {std::move(this->__fbthrift_field_evictions), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> evictions() & {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> evictions() const& {
    return evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> evictions() && {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> evictions() const&& {
    return std::move(*this).evictions_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lrus_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lrus};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lrus_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lrus)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lrus_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lrus};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MultiDListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lrus_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lrus)};
  }
  const ::facebook::cachelib::serialization::MMTinyLFUConfig& get_config() const&;
  ::facebook::cachelib::serialization::MMTinyLFUConfig get_config() &&;

  template <typename T_MMTinyLFUObject_config_struct_setter = ::facebook::cachelib::serialization::MMTinyLFUConfig>
  [[deprecated("Use `FOO.config_ref() = BAR;` instead of `FOO.set_config(BAR);`")]]
  ::facebook::cachelib::serialization::MMTinyLFUConfig& set_config(T_MMTinyLFUObject_config_struct_setter&& config_) {
    config_ref() = std::forward<T_MMTinyLFUObject_config_struct_setter>(config_);
    return config;
  }

  ::std::int64_t get_evictions() const {
    return __fbthrift_field_evictions;
  }

  [[deprecated("Use `FOO.evictions_ref() = BAR;` instead of `FOO.set_evictions(BAR);`")]]
  ::std::int64_t& set_evictions(::std::int64_t evictions_) {
    evictions_ref() = evictions_;
    return __fbthrift_field_evictions;
  }
  const ::facebook::cachelib::serialization::MultiDListObject& get_lrus() const&;
  ::facebook::cachelib::serialization::MultiDListObject get_lrus() &&;

  template <typename T_MMTinyLFUObject_lrus_struct_setter = ::facebook::cachelib::serialization::MultiDListObject>
  [[deprecated("Use `FOO.lrus_ref() = BAR;` instead of `FOO.set_lrus(BAR);`")]]
  ::facebook::cachelib::serialization::MultiDListObject& set_lrus(T_MMTinyLFUObject_lrus_struct_setter&& lrus_) {
    lrus_ref() = std::forward<T_MMTinyLFUObject_lrus_struct_setter>(lrus_);
    return lrus;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMTinyLFUObject>;
  friend void swap(MMTinyLFUObject& a, MMTinyLFUObject& b);
};

template <class Protocol_>
uint32_t MMTinyLFUObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMTinyLFUCollection final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMTinyLFUCollection;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMTinyLFUCollection() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMTinyLFUCollection(apache::thrift::FragileConstructor, ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>> pools__arg);

  MMTinyLFUCollection(MMTinyLFUCollection&&) noexcept;

  MMTinyLFUCollection(const MMTinyLFUCollection& src);


  MMTinyLFUCollection& operator=(MMTinyLFUCollection&&) noexcept;
  MMTinyLFUCollection& operator=(const MMTinyLFUCollection& src);
  void __clear();
 public:
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>> pools;

 public:

  bool operator==(const MMTinyLFUCollection&) const;
  bool operator<(const MMTinyLFUCollection&) const;

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> pools_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> pools_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->pools)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> pools_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->pools};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> pools_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->pools)};
  }
  const ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>& get_pools() const&;
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>> get_pools() &&;

  template <typename T_MMTinyLFUCollection_pools_struct_setter = ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>>
  [[deprecated("Use `FOO.pools_ref() = BAR;` instead of `FOO.set_pools(BAR);`")]]
  ::std::map<::std::int32_t, ::std::map<::std::int32_t, ::facebook::cachelib::serialization::MMTinyLFUObject>>& set_pools(T_MMTinyLFUCollection_pools_struct_setter&& pools_) {
    pools_ref() = std::forward<T_MMTinyLFUCollection_pools_struct_setter>(pools_);
    return pools;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMTinyLFUCollection>;
  friend void swap(MMTinyLFUCollection& a, MMTinyLFUCollection& b);
};

template <class Protocol_>
uint32_t MMTinyLFUCollection::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class ChainedHashTableObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ChainedHashTableObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ChainedHashTableObject() :
      bucketsPower(),
      locksPower(),
      __fbthrift_field_numKeys(),
      __fbthrift_field_hasherMagicId(static_cast<::std::int32_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ChainedHashTableObject(apache::thrift::FragileConstructor, ::std::int32_t bucketsPower__arg, ::std::int32_t locksPower__arg, ::std::int64_t numKeys__arg, ::std::int32_t hasherMagicId__arg);

  ChainedHashTableObject(ChainedHashTableObject&&) = default;

  ChainedHashTableObject(const ChainedHashTableObject&) = default;


  ChainedHashTableObject& operator=(ChainedHashTableObject&&) = default;

  ChainedHashTableObject& operator=(const ChainedHashTableObject&) = default;
  void __clear();
 public:
  ::std::int32_t bucketsPower;
 public:
  ::std::int32_t locksPower;
 private:
  ::std::int64_t __fbthrift_field_numKeys;
 private:
  ::std::int32_t __fbthrift_field_hasherMagicId;
 private:
  apache::thrift::detail::isset_bitset<2, false> __isset;

 public:

  bool operator==(const ChainedHashTableObject&) const;
  bool operator<(const ChainedHashTableObject&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> bucketsPower_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->bucketsPower};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> bucketsPower_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->bucketsPower)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> bucketsPower_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->bucketsPower};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> bucketsPower_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->bucketsPower)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> locksPower_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->locksPower};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> locksPower_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->locksPower)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> locksPower_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->locksPower};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> locksPower_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->locksPower)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numKeys_ref() const& {
    return {this->__fbthrift_field_numKeys, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numKeys_ref() const&& {
    return {std::move(this->__fbthrift_field_numKeys), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numKeys_ref() & {
    return {this->__fbthrift_field_numKeys, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numKeys_ref() && {
    return {std::move(this->__fbthrift_field_numKeys), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numKeys() & {
    return numKeys_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numKeys() const& {
    return numKeys_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numKeys() && {
    return std::move(*this).numKeys_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numKeys() const&& {
    return std::move(*this).numKeys_ref();
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> hasherMagicId_ref() const& {
    return {this->__fbthrift_field_hasherMagicId, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> hasherMagicId_ref() const&& {
    return {std::move(this->__fbthrift_field_hasherMagicId), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> hasherMagicId_ref() & {
    return {this->__fbthrift_field_hasherMagicId, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> hasherMagicId_ref() && {
    return {std::move(this->__fbthrift_field_hasherMagicId), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> hasherMagicId() & {
    return hasherMagicId_ref();
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> hasherMagicId() const& {
    return hasherMagicId_ref();
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> hasherMagicId() && {
    return std::move(*this).hasherMagicId_ref();
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> hasherMagicId() const&& {
    return std::move(*this).hasherMagicId_ref();
  }

  ::std::int32_t get_bucketsPower() const {
    return bucketsPower;
  }

  [[deprecated("Use `FOO.bucketsPower_ref() = BAR;` instead of `FOO.set_bucketsPower(BAR);`")]]
  ::std::int32_t& set_bucketsPower(::std::int32_t bucketsPower_) {
    bucketsPower_ref() = bucketsPower_;
    return bucketsPower;
  }

  ::std::int32_t get_locksPower() const {
    return locksPower;
  }

  [[deprecated("Use `FOO.locksPower_ref() = BAR;` instead of `FOO.set_locksPower(BAR);`")]]
  ::std::int32_t& set_locksPower(::std::int32_t locksPower_) {
    locksPower_ref() = locksPower_;
    return locksPower;
  }

  ::std::int64_t get_numKeys() const {
    return __fbthrift_field_numKeys;
  }

  [[deprecated("Use `FOO.numKeys_ref() = BAR;` instead of `FOO.set_numKeys(BAR);`")]]
  ::std::int64_t& set_numKeys(::std::int64_t numKeys_) {
    numKeys_ref() = numKeys_;
    return __fbthrift_field_numKeys;
  }

  ::std::int32_t get_hasherMagicId() const {
    return __fbthrift_field_hasherMagicId;
  }

  [[deprecated("Use `FOO.hasherMagicId_ref() = BAR;` instead of `FOO.set_hasherMagicId(BAR);`")]]
  ::std::int32_t& set_hasherMagicId(::std::int32_t hasherMagicId_) {
    hasherMagicId_ref() = hasherMagicId_;
    return __fbthrift_field_hasherMagicId;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ChainedHashTableObject>;
  friend void swap(ChainedHashTableObject& a, ChainedHashTableObject& b);
};

template <class Protocol_>
uint32_t ChainedHashTableObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MMTTLBucketObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MMTTLBucketObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MMTTLBucketObject() :
      __fbthrift_field_expirationTime(),
      __fbthrift_field_creationTime() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MMTTLBucketObject(apache::thrift::FragileConstructor, ::std::int64_t expirationTime__arg, ::std::int64_t creationTime__arg, ::facebook::cachelib::serialization::DListObject dList__arg);

  MMTTLBucketObject(MMTTLBucketObject&&) = default;

  MMTTLBucketObject(const MMTTLBucketObject&) = default;


  MMTTLBucketObject& operator=(MMTTLBucketObject&&) = default;

  MMTTLBucketObject& operator=(const MMTTLBucketObject&) = default;
  void __clear();
 private:
  ::std::int64_t __fbthrift_field_expirationTime;
 private:
  ::std::int64_t __fbthrift_field_creationTime;
 public:
  ::facebook::cachelib::serialization::DListObject dList;
 private:
  apache::thrift::detail::isset_bitset<2, false> __isset;

 public:

  bool operator==(const MMTTLBucketObject&) const;
  bool operator<(const MMTTLBucketObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> expirationTime_ref() const& {
    return {this->__fbthrift_field_expirationTime, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> expirationTime_ref() const&& {
    return {std::move(this->__fbthrift_field_expirationTime), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> expirationTime_ref() & {
    return {this->__fbthrift_field_expirationTime, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> expirationTime_ref() && {
    return {std::move(this->__fbthrift_field_expirationTime), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> expirationTime() & {
    return expirationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> expirationTime() const& {
    return expirationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> expirationTime() && {
    return std::move(*this).expirationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> expirationTime() const&& {
    return std::move(*this).expirationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> creationTime_ref() const& {
    return {this->__fbthrift_field_creationTime, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> creationTime_ref() const&& {
    return {std::move(this->__fbthrift_field_creationTime), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> creationTime_ref() & {
    return {this->__fbthrift_field_creationTime, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> creationTime_ref() && {
    return {std::move(this->__fbthrift_field_creationTime), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> creationTime() & {
    return creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> creationTime() const& {
    return creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> creationTime() && {
    return std::move(*this).creationTime_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> creationTime() const&& {
    return std::move(*this).creationTime_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> dList_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->dList};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> dList_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->dList)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> dList_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->dList};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::DListObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> dList_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->dList)};
  }

  ::std::int64_t get_expirationTime() const {
    return __fbthrift_field_expirationTime;
  }

  [[deprecated("Use `FOO.expirationTime_ref() = BAR;` instead of `FOO.set_expirationTime(BAR);`")]]
  ::std::int64_t& set_expirationTime(::std::int64_t expirationTime_) {
    expirationTime_ref() = expirationTime_;
    return __fbthrift_field_expirationTime;
  }

  ::std::int64_t get_creationTime() const {
    return __fbthrift_field_creationTime;
  }

  [[deprecated("Use `FOO.creationTime_ref() = BAR;` instead of `FOO.set_creationTime(BAR);`")]]
  ::std::int64_t& set_creationTime(::std::int64_t creationTime_) {
    creationTime_ref() = creationTime_;
    return __fbthrift_field_creationTime;
  }
  const ::facebook::cachelib::serialization::DListObject& get_dList() const&;
  ::facebook::cachelib::serialization::DListObject get_dList() &&;

  template <typename T_MMTTLBucketObject_dList_struct_setter = ::facebook::cachelib::serialization::DListObject>
  [[deprecated("Use `FOO.dList_ref() = BAR;` instead of `FOO.set_dList(BAR);`")]]
  ::facebook::cachelib::serialization::DListObject& set_dList(T_MMTTLBucketObject_dList_struct_setter&& dList_) {
    dList_ref() = std::forward<T_MMTTLBucketObject_dList_struct_setter>(dList_);
    return dList;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MMTTLBucketObject>;
  friend void swap(MMTTLBucketObject& a, MMTTLBucketObject& b);
};

template <class Protocol_>
uint32_t MMTTLBucketObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class TTLBucketCollection final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = TTLBucketCollection;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TTLBucketCollection() :
      __fbthrift_field_minEpoch(static_cast<::std::int64_t>(0)),
      __fbthrift_field_maxTTL(static_cast<::std::int64_t>(0)),
      __fbthrift_field_interval(static_cast<::std::int64_t>(0)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TTLBucketCollection(apache::thrift::FragileConstructor, ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject> buckets__arg, ::std::int64_t minEpoch__arg, ::std::int64_t maxTTL__arg, ::std::int64_t interval__arg);

  TTLBucketCollection(TTLBucketCollection&&) noexcept;

  TTLBucketCollection(const TTLBucketCollection& src);


  TTLBucketCollection& operator=(TTLBucketCollection&&) noexcept;
  TTLBucketCollection& operator=(const TTLBucketCollection& src);
  void __clear();
 public:
  ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject> buckets;
 private:
  ::std::int64_t __fbthrift_field_minEpoch;
 private:
  ::std::int64_t __fbthrift_field_maxTTL;
 private:
  ::std::int64_t __fbthrift_field_interval;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const TTLBucketCollection&) const;
  bool operator<(const TTLBucketCollection&) const;

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> buckets_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->buckets};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> buckets_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->buckets)};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> buckets_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->buckets};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> buckets_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->buckets)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> minEpoch_ref() const& {
    return {this->__fbthrift_field_minEpoch, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> minEpoch_ref() const&& {
    return {std::move(this->__fbthrift_field_minEpoch), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> minEpoch_ref() & {
    return {this->__fbthrift_field_minEpoch, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> minEpoch_ref() && {
    return {std::move(this->__fbthrift_field_minEpoch), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> minEpoch() & {
    return minEpoch_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> minEpoch() const& {
    return minEpoch_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> minEpoch() && {
    return std::move(*this).minEpoch_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> minEpoch() const&& {
    return std::move(*this).minEpoch_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> maxTTL_ref() const& {
    return {this->__fbthrift_field_maxTTL, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> maxTTL_ref() const&& {
    return {std::move(this->__fbthrift_field_maxTTL), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> maxTTL_ref() & {
    return {this->__fbthrift_field_maxTTL, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> maxTTL_ref() && {
    return {std::move(this->__fbthrift_field_maxTTL), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> maxTTL() & {
    return maxTTL_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> maxTTL() const& {
    return maxTTL_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> maxTTL() && {
    return std::move(*this).maxTTL_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> maxTTL() const&& {
    return std::move(*this).maxTTL_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> interval_ref() const& {
    return {this->__fbthrift_field_interval, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> interval_ref() const&& {
    return {std::move(this->__fbthrift_field_interval), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> interval_ref() & {
    return {this->__fbthrift_field_interval, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> interval_ref() && {
    return {std::move(this->__fbthrift_field_interval), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> interval() & {
    return interval_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> interval() const& {
    return interval_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> interval() && {
    return std::move(*this).interval_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> interval() const&& {
    return std::move(*this).interval_ref();
  }
  const ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>& get_buckets() const&;
  ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject> get_buckets() &&;

  template <typename T_TTLBucketCollection_buckets_struct_setter = ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>>
  [[deprecated("Use `FOO.buckets_ref() = BAR;` instead of `FOO.set_buckets(BAR);`")]]
  ::std::map<::std::int64_t, ::facebook::cachelib::serialization::MMTTLBucketObject>& set_buckets(T_TTLBucketCollection_buckets_struct_setter&& buckets_) {
    buckets_ref() = std::forward<T_TTLBucketCollection_buckets_struct_setter>(buckets_);
    return buckets;
  }

  ::std::int64_t get_minEpoch() const {
    return __fbthrift_field_minEpoch;
  }

  [[deprecated("Use `FOO.minEpoch_ref() = BAR;` instead of `FOO.set_minEpoch(BAR);`")]]
  ::std::int64_t& set_minEpoch(::std::int64_t minEpoch_) {
    minEpoch_ref() = minEpoch_;
    return __fbthrift_field_minEpoch;
  }

  ::std::int64_t get_maxTTL() const {
    return __fbthrift_field_maxTTL;
  }

  [[deprecated("Use `FOO.maxTTL_ref() = BAR;` instead of `FOO.set_maxTTL(BAR);`")]]
  ::std::int64_t& set_maxTTL(::std::int64_t maxTTL_) {
    maxTTL_ref() = maxTTL_;
    return __fbthrift_field_maxTTL;
  }

  ::std::int64_t get_interval() const {
    return __fbthrift_field_interval;
  }

  [[deprecated("Use `FOO.interval_ref() = BAR;` instead of `FOO.set_interval(BAR);`")]]
  ::std::int64_t& set_interval(::std::int64_t interval_) {
    interval_ref() = interval_;
    return __fbthrift_field_interval;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TTLBucketCollection>;
  friend void swap(TTLBucketCollection& a, TTLBucketCollection& b);
};

template <class Protocol_>
uint32_t TTLBucketCollection::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
