/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct size;
struct compressedHead;
struct compressedTail;
struct compressedHead;
struct compressedTail;
struct size;
struct lists;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_size
#define APACHE_THRIFT_ACCESSOR_size
APACHE_THRIFT_DEFINE_ACCESSOR(size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedHead
#define APACHE_THRIFT_ACCESSOR_compressedHead
APACHE_THRIFT_DEFINE_ACCESSOR(compressedHead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedTail
#define APACHE_THRIFT_ACCESSOR_compressedTail
APACHE_THRIFT_DEFINE_ACCESSOR(compressedTail);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedHead
#define APACHE_THRIFT_ACCESSOR_compressedHead
APACHE_THRIFT_DEFINE_ACCESSOR(compressedHead);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedTail
#define APACHE_THRIFT_ACCESSOR_compressedTail
APACHE_THRIFT_DEFINE_ACCESSOR(compressedTail);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_size
#define APACHE_THRIFT_ACCESSOR_size
APACHE_THRIFT_DEFINE_ACCESSOR(size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lists
#define APACHE_THRIFT_ACCESSOR_lists
APACHE_THRIFT_DEFINE_ACCESSOR(lists);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace serialization {
class SListObject;
class DListObject;
class MultiDListObject;
}}} // facebook::cachelib::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class SListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SListObject() :
      size(),
      compressedHead(),
      __fbthrift_field_compressedTail(static_cast<::std::int64_t>(-1)) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SListObject(apache::thrift::FragileConstructor, ::std::int64_t size__arg, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg);

  SListObject(SListObject&&) = default;

  SListObject(const SListObject&) = default;


  SListObject& operator=(SListObject&&) = default;

  SListObject& operator=(const SListObject&) = default;
  void __clear();
 public:
  ::std::int64_t size;
 public:
  ::std::int64_t compressedHead;
 private:
  ::std::int64_t __fbthrift_field_compressedTail;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const SListObject&) const;
  bool operator<(const SListObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compressedTail_ref() const& {
    return {this->__fbthrift_field_compressedTail, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compressedTail_ref() const&& {
    return {std::move(this->__fbthrift_field_compressedTail), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compressedTail_ref() & {
    return {this->__fbthrift_field_compressedTail, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compressedTail_ref() && {
    return {std::move(this->__fbthrift_field_compressedTail), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> compressedTail() & {
    return compressedTail_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> compressedTail() const& {
    return compressedTail_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> compressedTail() && {
    return std::move(*this).compressedTail_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> compressedTail() const&& {
    return std::move(*this).compressedTail_ref();
  }

  ::std::int64_t get_size() const {
    return size;
  }

  [[deprecated("Use `FOO.size_ref() = BAR;` instead of `FOO.set_size(BAR);`")]]
  ::std::int64_t& set_size(::std::int64_t size_) {
    size_ref() = size_;
    return size;
  }

  ::std::int64_t get_compressedHead() const {
    return compressedHead;
  }

  [[deprecated("Use `FOO.compressedHead_ref() = BAR;` instead of `FOO.set_compressedHead(BAR);`")]]
  ::std::int64_t& set_compressedHead(::std::int64_t compressedHead_) {
    compressedHead_ref() = compressedHead_;
    return compressedHead;
  }

  ::std::int64_t get_compressedTail() const {
    return __fbthrift_field_compressedTail;
  }

  [[deprecated("Use `FOO.compressedTail_ref() = BAR;` instead of `FOO.set_compressedTail(BAR);`")]]
  ::std::int64_t& set_compressedTail(::std::int64_t compressedTail_) {
    compressedTail_ref() = compressedTail_;
    return __fbthrift_field_compressedTail;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SListObject>;
  friend void swap(SListObject& a, SListObject& b);
};

template <class Protocol_>
uint32_t SListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class DListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = DListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DListObject() :
      compressedHead(),
      compressedTail(),
      size() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DListObject(apache::thrift::FragileConstructor, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg, ::std::int64_t size__arg);

  DListObject(DListObject&&) = default;

  DListObject(const DListObject&) = default;


  DListObject& operator=(DListObject&&) = default;

  DListObject& operator=(const DListObject&) = default;
  void __clear();
 public:
  ::std::int64_t compressedHead;
 public:
  ::std::int64_t compressedTail;
 public:
  ::std::int64_t size;

 public:

  bool operator==(const DListObject&) const;
  bool operator<(const DListObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedTail_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedTail_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedTail_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->compressedTail};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedTail_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->compressedTail)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->size)};
  }

  ::std::int64_t get_compressedHead() const {
    return compressedHead;
  }

  [[deprecated("Use `FOO.compressedHead_ref() = BAR;` instead of `FOO.set_compressedHead(BAR);`")]]
  ::std::int64_t& set_compressedHead(::std::int64_t compressedHead_) {
    compressedHead_ref() = compressedHead_;
    return compressedHead;
  }

  ::std::int64_t get_compressedTail() const {
    return compressedTail;
  }

  [[deprecated("Use `FOO.compressedTail_ref() = BAR;` instead of `FOO.set_compressedTail(BAR);`")]]
  ::std::int64_t& set_compressedTail(::std::int64_t compressedTail_) {
    compressedTail_ref() = compressedTail_;
    return compressedTail;
  }

  ::std::int64_t get_size() const {
    return size;
  }

  [[deprecated("Use `FOO.size_ref() = BAR;` instead of `FOO.set_size(BAR);`")]]
  ::std::int64_t& set_size(::std::int64_t size_) {
    size_ref() = size_;
    return size;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DListObject>;
  friend void swap(DListObject& a, DListObject& b);
};

template <class Protocol_>
uint32_t DListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MultiDListObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MultiDListObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MultiDListObject() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MultiDListObject(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::serialization::DListObject> lists__arg);

  MultiDListObject(MultiDListObject&&) noexcept;

  MultiDListObject(const MultiDListObject& src);


  MultiDListObject& operator=(MultiDListObject&&) noexcept;
  MultiDListObject& operator=(const MultiDListObject& src);
  void __clear();
 public:
  ::std::vector<::facebook::cachelib::serialization::DListObject> lists;

 public:

  bool operator==(const MultiDListObject&) const;
  bool operator<(const MultiDListObject&) const;

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> lists_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> lists_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->lists)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> lists_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->lists};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> lists_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->lists)};
  }
  const ::std::vector<::facebook::cachelib::serialization::DListObject>& get_lists() const&;
  ::std::vector<::facebook::cachelib::serialization::DListObject> get_lists() &&;

  template <typename T_MultiDListObject_lists_struct_setter = ::std::vector<::facebook::cachelib::serialization::DListObject>>
  [[deprecated("Use `FOO.lists_ref() = BAR;` instead of `FOO.set_lists(BAR);`")]]
  ::std::vector<::facebook::cachelib::serialization::DListObject>& set_lists(T_MultiDListObject_lists_struct_setter&& lists_) {
    lists_ref() = std::forward<T_MultiDListObject_lists_struct_setter>(lists_);
    return lists;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MultiDListObject>;
  friend void swap(MultiDListObject& a, MultiDListObject& b);
};

template <class Protocol_>
uint32_t MultiDListObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
