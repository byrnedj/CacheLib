/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "objects_types.h"
#include "objects_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "objects_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::serialization::SListObject>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::serialization::SListObject>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace serialization {


SListObject::SListObject(apache::thrift::FragileConstructor, ::std::int64_t size__arg, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg) :
    size(std::move(size__arg)),
    compressedHead(std::move(compressedHead__arg)),
    __fbthrift_field_compressedTail(std::move(compressedTail__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void SListObject::__clear() {
  // clear all fields
  this->size = ::std::int64_t();
  this->compressedHead = ::std::int64_t();
  this->__fbthrift_field_compressedTail = static_cast<::std::int64_t>(-1);
  __isset = {};
}

bool SListObject::operator==(const SListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return false;
  }
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return false;
  }
  if (!(lhs.compressedTail_ref() == rhs.compressedTail_ref())) {
    return false;
  }
  return true;
}

bool SListObject::operator<(const SListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return lhs.size_ref() < rhs.size_ref();
  }
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return lhs.compressedHead_ref() < rhs.compressedHead_ref();
  }
  if (!(lhs.compressedTail_ref() == rhs.compressedTail_ref())) {
    return lhs.compressedTail_ref() < rhs.compressedTail_ref();
  }
  return false;
}


void swap(SListObject& a, SListObject& b) {
  using ::std::swap;
  swap(a.size_ref().value(), b.size_ref().value());
  swap(a.compressedHead_ref().value(), b.compressedHead_ref().value());
  swap(a.compressedTail_ref().value(), b.compressedTail_ref().value());
  swap(a.__isset, b.__isset);
}

template void SListObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SListObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SListObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SListObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SListObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SListObject::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SListObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SListObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::serialization

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::serialization::DListObject>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::serialization::DListObject>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace serialization {


DListObject::DListObject(apache::thrift::FragileConstructor, ::std::int64_t compressedHead__arg, ::std::int64_t compressedTail__arg, ::std::int64_t size__arg) :
    compressedHead(std::move(compressedHead__arg)),
    compressedTail(std::move(compressedTail__arg)),
    size(std::move(size__arg)) {
}


void DListObject::__clear() {
  // clear all fields
  this->compressedHead = ::std::int64_t();
  this->compressedTail = ::std::int64_t();
  this->size = ::std::int64_t();
}

bool DListObject::operator==(const DListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return false;
  }
  if (!(lhs.compressedTail_ref() == rhs.compressedTail_ref())) {
    return false;
  }
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return false;
  }
  return true;
}

bool DListObject::operator<(const DListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return lhs.compressedHead_ref() < rhs.compressedHead_ref();
  }
  if (!(lhs.compressedTail_ref() == rhs.compressedTail_ref())) {
    return lhs.compressedTail_ref() < rhs.compressedTail_ref();
  }
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return lhs.size_ref() < rhs.size_ref();
  }
  return false;
}


void swap(DListObject& a, DListObject& b) {
  using ::std::swap;
  swap(a.compressedHead_ref().value(), b.compressedHead_ref().value());
  swap(a.compressedTail_ref().value(), b.compressedTail_ref().value());
  swap(a.size_ref().value(), b.size_ref().value());
}

template void DListObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DListObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DListObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DListObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DListObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DListObject::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DListObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DListObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::serialization

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::serialization::MultiDListObject>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::serialization::MultiDListObject>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace serialization {

MultiDListObject::MultiDListObject(const MultiDListObject&) = default;
MultiDListObject& MultiDListObject::operator=(const MultiDListObject&) = default;
MultiDListObject::MultiDListObject(MultiDListObject&& other) noexcept  :
    lists(std::move(other.lists)) {
}

MultiDListObject& MultiDListObject::operator=(FOLLY_MAYBE_UNUSED MultiDListObject&& other) noexcept {
    this->lists = std::move(other.lists);
    return *this;
}


MultiDListObject::MultiDListObject(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::serialization::DListObject> lists__arg) :
    lists(std::move(lists__arg)) {
}


void MultiDListObject::__clear() {
  // clear all fields
  this->lists.clear();
}

bool MultiDListObject::operator==(const MultiDListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.lists_ref() == rhs.lists_ref())) {
    return false;
  }
  return true;
}

bool MultiDListObject::operator<(const MultiDListObject& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.lists_ref() == rhs.lists_ref())) {
    return lhs.lists_ref() < rhs.lists_ref();
  }
  return false;
}

const ::std::vector<::facebook::cachelib::serialization::DListObject>& MultiDListObject::get_lists() const& {
  return lists;
}

::std::vector<::facebook::cachelib::serialization::DListObject> MultiDListObject::get_lists() && {
  return std::move(lists);
}


void swap(MultiDListObject& a, MultiDListObject& b) {
  using ::std::swap;
  swap(a.lists_ref().value(), b.lists_ref().value());
}

template void MultiDListObject::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MultiDListObject::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MultiDListObject::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MultiDListObject::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MultiDListObject::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MultiDListObject::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MultiDListObject::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MultiDListObject::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MultiDListObject,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::cachelib::serialization::DListObject>>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        MultiDListObject,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::facebook::cachelib::serialization::DListObject>>,
    "inconsistent use of nimble option");

}}} // facebook::cachelib::serialization

namespace facebook { namespace cachelib { namespace serialization { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}}}} // facebook::cachelib::serialization
