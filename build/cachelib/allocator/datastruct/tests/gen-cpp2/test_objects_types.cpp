/**
 * Autogenerated by Thrift for test_objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "test_objects_types.h"
#include "test_objects_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "test_objects_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::test_serialization::SListObjectNoCompressedTail>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::test_serialization::SListObjectNoCompressedTail>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace test_serialization {


SListObjectNoCompressedTail::SListObjectNoCompressedTail(apache::thrift::FragileConstructor, ::std::int64_t size__arg, ::std::int64_t compressedHead__arg) :
    size(std::move(size__arg)),
    compressedHead(std::move(compressedHead__arg)) {
}


void SListObjectNoCompressedTail::__clear() {
  // clear all fields
  this->size = ::std::int64_t();
  this->compressedHead = ::std::int64_t();
}

bool SListObjectNoCompressedTail::operator==(const SListObjectNoCompressedTail& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return false;
  }
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return false;
  }
  return true;
}

bool SListObjectNoCompressedTail::operator<(const SListObjectNoCompressedTail& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.size_ref() == rhs.size_ref())) {
    return lhs.size_ref() < rhs.size_ref();
  }
  if (!(lhs.compressedHead_ref() == rhs.compressedHead_ref())) {
    return lhs.compressedHead_ref() < rhs.compressedHead_ref();
  }
  return false;
}


void swap(SListObjectNoCompressedTail& a, SListObjectNoCompressedTail& b) {
  using ::std::swap;
  swap(a.size_ref().value(), b.size_ref().value());
  swap(a.compressedHead_ref().value(), b.compressedHead_ref().value());
}

template void SListObjectNoCompressedTail::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SListObjectNoCompressedTail::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SListObjectNoCompressedTail::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SListObjectNoCompressedTail::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SListObjectNoCompressedTail::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SListObjectNoCompressedTail::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SListObjectNoCompressedTail::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SListObjectNoCompressedTail::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::test_serialization

namespace facebook { namespace cachelib { namespace test_serialization { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}}}} // facebook::cachelib::test_serialization
