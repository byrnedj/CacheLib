/**
 * Autogenerated by Thrift for test_objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct size;
struct compressedHead;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_size
#define APACHE_THRIFT_ACCESSOR_size
APACHE_THRIFT_DEFINE_ACCESSOR(size);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compressedHead
#define APACHE_THRIFT_ACCESSOR_compressedHead
APACHE_THRIFT_DEFINE_ACCESSOR(compressedHead);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace test_serialization {
class SListObjectNoCompressedTail;
}}} // facebook::cachelib::test_serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace test_serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::test_serialization
namespace facebook { namespace cachelib { namespace test_serialization {
class SListObjectNoCompressedTail final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SListObjectNoCompressedTail;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SListObjectNoCompressedTail() :
      size(),
      compressedHead() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SListObjectNoCompressedTail(apache::thrift::FragileConstructor, ::std::int64_t size__arg, ::std::int64_t compressedHead__arg);

  SListObjectNoCompressedTail(SListObjectNoCompressedTail&&) = default;

  SListObjectNoCompressedTail(const SListObjectNoCompressedTail&) = default;


  SListObjectNoCompressedTail& operator=(SListObjectNoCompressedTail&&) = default;

  SListObjectNoCompressedTail& operator=(const SListObjectNoCompressedTail&) = default;
  void __clear();
 public:
  ::std::int64_t size;
 public:
  ::std::int64_t compressedHead;

 public:

  bool operator==(const SListObjectNoCompressedTail&) const;
  bool operator<(const SListObjectNoCompressedTail&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> size_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> size_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> size_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->size};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> size_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->size)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> compressedHead_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> compressedHead_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->compressedHead)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> compressedHead_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->compressedHead};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> compressedHead_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->compressedHead)};
  }

  ::std::int64_t get_size() const {
    return size;
  }

  [[deprecated("Use `FOO.size_ref() = BAR;` instead of `FOO.set_size(BAR);`")]]
  ::std::int64_t& set_size(::std::int64_t size_) {
    size_ref() = size_;
    return size;
  }

  ::std::int64_t get_compressedHead() const {
    return compressedHead;
  }

  [[deprecated("Use `FOO.compressedHead_ref() = BAR;` instead of `FOO.set_compressedHead(BAR);`")]]
  ::std::int64_t& set_compressedHead(::std::int64_t compressedHead_) {
    compressedHead_ref() = compressedHead_;
    return compressedHead;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SListObjectNoCompressedTail>;
  friend void swap(SListObjectNoCompressedTail& a, SListObjectNoCompressedTail& b);
};

template <class Protocol_>
uint32_t SListObjectNoCompressedTail::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::test_serialization
