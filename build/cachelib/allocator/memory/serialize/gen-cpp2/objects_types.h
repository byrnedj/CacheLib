/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "cachelib/allocator/datastruct/serialize/gen-cpp2/objects_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct memorySize;
struct canAllocate;
struct memoryPoolSize;
struct slabSize;
struct minAllocSize;
struct nextSlabIdx;
struct freeSlabIdxs;
struct advisedSlabIdxs;
struct classId;
struct allocationSize;
struct currOffset;
struct canAllocate;
struct freedAllocationsObject;
struct currSlabIdx;
struct allocatedSlabIdxs;
struct freeSlabIdxs;
struct id;
struct maxSize;
struct currSlabAllocSize;
struct currAllocSize;
struct acSizes;
struct ac;
struct numSlabResize;
struct numSlabRebalance;
struct freeSlabIdxs;
struct numSlabsAdvised;
struct pools;
struct poolsByName;
struct nextPoolId;
struct allocSizes;
struct enableZeroedSlabAllocs;
struct lockMemory;
struct slabAllocator;
struct memoryPoolManager;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_memorySize
#define APACHE_THRIFT_ACCESSOR_memorySize
APACHE_THRIFT_DEFINE_ACCESSOR(memorySize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_canAllocate
#define APACHE_THRIFT_ACCESSOR_canAllocate
APACHE_THRIFT_DEFINE_ACCESSOR(canAllocate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_memoryPoolSize
#define APACHE_THRIFT_ACCESSOR_memoryPoolSize
APACHE_THRIFT_DEFINE_ACCESSOR(memoryPoolSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_slabSize
#define APACHE_THRIFT_ACCESSOR_slabSize
APACHE_THRIFT_DEFINE_ACCESSOR(slabSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_minAllocSize
#define APACHE_THRIFT_ACCESSOR_minAllocSize
APACHE_THRIFT_DEFINE_ACCESSOR(minAllocSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nextSlabIdx
#define APACHE_THRIFT_ACCESSOR_nextSlabIdx
APACHE_THRIFT_DEFINE_ACCESSOR(nextSlabIdx);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_freeSlabIdxs
#define APACHE_THRIFT_ACCESSOR_freeSlabIdxs
APACHE_THRIFT_DEFINE_ACCESSOR(freeSlabIdxs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_advisedSlabIdxs
#define APACHE_THRIFT_ACCESSOR_advisedSlabIdxs
APACHE_THRIFT_DEFINE_ACCESSOR(advisedSlabIdxs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_classId
#define APACHE_THRIFT_ACCESSOR_classId
APACHE_THRIFT_DEFINE_ACCESSOR(classId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_allocationSize
#define APACHE_THRIFT_ACCESSOR_allocationSize
APACHE_THRIFT_DEFINE_ACCESSOR(allocationSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currOffset
#define APACHE_THRIFT_ACCESSOR_currOffset
APACHE_THRIFT_DEFINE_ACCESSOR(currOffset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_canAllocate
#define APACHE_THRIFT_ACCESSOR_canAllocate
APACHE_THRIFT_DEFINE_ACCESSOR(canAllocate);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_freedAllocationsObject
#define APACHE_THRIFT_ACCESSOR_freedAllocationsObject
APACHE_THRIFT_DEFINE_ACCESSOR(freedAllocationsObject);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currSlabIdx
#define APACHE_THRIFT_ACCESSOR_currSlabIdx
APACHE_THRIFT_DEFINE_ACCESSOR(currSlabIdx);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_allocatedSlabIdxs
#define APACHE_THRIFT_ACCESSOR_allocatedSlabIdxs
APACHE_THRIFT_DEFINE_ACCESSOR(allocatedSlabIdxs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_freeSlabIdxs
#define APACHE_THRIFT_ACCESSOR_freeSlabIdxs
APACHE_THRIFT_DEFINE_ACCESSOR(freeSlabIdxs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_id
#define APACHE_THRIFT_ACCESSOR_id
APACHE_THRIFT_DEFINE_ACCESSOR(id);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_maxSize
#define APACHE_THRIFT_ACCESSOR_maxSize
APACHE_THRIFT_DEFINE_ACCESSOR(maxSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currSlabAllocSize
#define APACHE_THRIFT_ACCESSOR_currSlabAllocSize
APACHE_THRIFT_DEFINE_ACCESSOR(currSlabAllocSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_currAllocSize
#define APACHE_THRIFT_ACCESSOR_currAllocSize
APACHE_THRIFT_DEFINE_ACCESSOR(currAllocSize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_acSizes
#define APACHE_THRIFT_ACCESSOR_acSizes
APACHE_THRIFT_DEFINE_ACCESSOR(acSizes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ac
#define APACHE_THRIFT_ACCESSOR_ac
APACHE_THRIFT_DEFINE_ACCESSOR(ac);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numSlabResize
#define APACHE_THRIFT_ACCESSOR_numSlabResize
APACHE_THRIFT_DEFINE_ACCESSOR(numSlabResize);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numSlabRebalance
#define APACHE_THRIFT_ACCESSOR_numSlabRebalance
APACHE_THRIFT_DEFINE_ACCESSOR(numSlabRebalance);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_freeSlabIdxs
#define APACHE_THRIFT_ACCESSOR_freeSlabIdxs
APACHE_THRIFT_DEFINE_ACCESSOR(freeSlabIdxs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_numSlabsAdvised
#define APACHE_THRIFT_ACCESSOR_numSlabsAdvised
APACHE_THRIFT_DEFINE_ACCESSOR(numSlabsAdvised);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pools
#define APACHE_THRIFT_ACCESSOR_pools
APACHE_THRIFT_DEFINE_ACCESSOR(pools);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_poolsByName
#define APACHE_THRIFT_ACCESSOR_poolsByName
APACHE_THRIFT_DEFINE_ACCESSOR(poolsByName);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_nextPoolId
#define APACHE_THRIFT_ACCESSOR_nextPoolId
APACHE_THRIFT_DEFINE_ACCESSOR(nextPoolId);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_allocSizes
#define APACHE_THRIFT_ACCESSOR_allocSizes
APACHE_THRIFT_DEFINE_ACCESSOR(allocSizes);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enableZeroedSlabAllocs
#define APACHE_THRIFT_ACCESSOR_enableZeroedSlabAllocs
APACHE_THRIFT_DEFINE_ACCESSOR(enableZeroedSlabAllocs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lockMemory
#define APACHE_THRIFT_ACCESSOR_lockMemory
APACHE_THRIFT_DEFINE_ACCESSOR(lockMemory);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_slabAllocator
#define APACHE_THRIFT_ACCESSOR_slabAllocator
APACHE_THRIFT_DEFINE_ACCESSOR(slabAllocator);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_memoryPoolManager
#define APACHE_THRIFT_ACCESSOR_memoryPoolManager
APACHE_THRIFT_DEFINE_ACCESSOR(memoryPoolManager);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace facebook { namespace cachelib { namespace serialization {
class SlabAllocatorObject;
class AllocationClassObject;
class MemoryPoolObject;
class MemoryPoolManagerObject;
class MemoryAllocatorObject;
}}} // facebook::cachelib::serialization
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace facebook { namespace cachelib { namespace serialization {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class SlabAllocatorObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SlabAllocatorObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SlabAllocatorObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SlabAllocatorObject(apache::thrift::FragileConstructor, ::std::int64_t memorySize__arg, bool canAllocate__arg, ::std::map<::std::int8_t, ::std::int64_t> memoryPoolSize__arg, ::std::int64_t slabSize__arg, ::std::int64_t minAllocSize__arg, ::std::int32_t nextSlabIdx__arg, ::std::vector<::std::int32_t> freeSlabIdxs__arg, ::std::vector<::std::int32_t> advisedSlabIdxs__arg);

  SlabAllocatorObject(SlabAllocatorObject&&) noexcept;

  SlabAllocatorObject(const SlabAllocatorObject& src);


  SlabAllocatorObject& operator=(SlabAllocatorObject&&) noexcept;
  SlabAllocatorObject& operator=(const SlabAllocatorObject& src);
  void __clear();

  ~SlabAllocatorObject();

 public:
  ::std::int64_t memorySize;
 public:
  bool canAllocate;
 public:
  ::std::map<::std::int8_t, ::std::int64_t> memoryPoolSize;
 public:
  ::std::int64_t slabSize;
 public:
  ::std::int64_t minAllocSize;
 public:
  ::std::int32_t nextSlabIdx;
 public:
  ::std::vector<::std::int32_t> freeSlabIdxs;
 private:
  ::std::vector<::std::int32_t> __fbthrift_field_advisedSlabIdxs;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const SlabAllocatorObject&) const;
  bool operator<(const SlabAllocatorObject&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> memorySize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->memorySize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> memorySize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->memorySize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> memorySize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->memorySize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> memorySize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->memorySize)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> canAllocate_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->canAllocate};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> canAllocate_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->canAllocate)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> canAllocate_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->canAllocate};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> canAllocate_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->canAllocate)};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> memoryPoolSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->memoryPoolSize};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> memoryPoolSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->memoryPoolSize)};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> memoryPoolSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->memoryPoolSize};
  }

  template <typename..., typename T = ::std::map<::std::int8_t, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> memoryPoolSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->memoryPoolSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> slabSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->slabSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> slabSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->slabSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> slabSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->slabSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> slabSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->slabSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> minAllocSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->minAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> minAllocSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->minAllocSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> minAllocSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->minAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> minAllocSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->minAllocSize)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> nextSlabIdx_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->nextSlabIdx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> nextSlabIdx_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->nextSlabIdx)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> nextSlabIdx_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->nextSlabIdx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> nextSlabIdx_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->nextSlabIdx)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> freeSlabIdxs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> freeSlabIdxs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->freeSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> freeSlabIdxs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> freeSlabIdxs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->freeSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> advisedSlabIdxs_ref() const& {
    return {this->__fbthrift_field_advisedSlabIdxs, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> advisedSlabIdxs_ref() const&& {
    return {std::move(this->__fbthrift_field_advisedSlabIdxs), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> advisedSlabIdxs_ref() & {
    return {this->__fbthrift_field_advisedSlabIdxs, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> advisedSlabIdxs_ref() && {
    return {std::move(this->__fbthrift_field_advisedSlabIdxs), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> advisedSlabIdxs() & {
    return advisedSlabIdxs_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> advisedSlabIdxs() const& {
    return advisedSlabIdxs_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> advisedSlabIdxs() && {
    return std::move(*this).advisedSlabIdxs_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> advisedSlabIdxs() const&& {
    return std::move(*this).advisedSlabIdxs_ref();
  }

  ::std::int64_t get_memorySize() const {
    return memorySize;
  }

  [[deprecated("Use `FOO.memorySize_ref() = BAR;` instead of `FOO.set_memorySize(BAR);`")]]
  ::std::int64_t& set_memorySize(::std::int64_t memorySize_) {
    memorySize_ref() = memorySize_;
    return memorySize;
  }

  bool get_canAllocate() const {
    return canAllocate;
  }

  [[deprecated("Use `FOO.canAllocate_ref() = BAR;` instead of `FOO.set_canAllocate(BAR);`")]]
  bool& set_canAllocate(bool canAllocate_) {
    canAllocate_ref() = canAllocate_;
    return canAllocate;
  }
  const ::std::map<::std::int8_t, ::std::int64_t>& get_memoryPoolSize() const&;
  ::std::map<::std::int8_t, ::std::int64_t> get_memoryPoolSize() &&;

  template <typename T_SlabAllocatorObject_memoryPoolSize_struct_setter = ::std::map<::std::int8_t, ::std::int64_t>>
  [[deprecated("Use `FOO.memoryPoolSize_ref() = BAR;` instead of `FOO.set_memoryPoolSize(BAR);`")]]
  ::std::map<::std::int8_t, ::std::int64_t>& set_memoryPoolSize(T_SlabAllocatorObject_memoryPoolSize_struct_setter&& memoryPoolSize_) {
    memoryPoolSize_ref() = std::forward<T_SlabAllocatorObject_memoryPoolSize_struct_setter>(memoryPoolSize_);
    return memoryPoolSize;
  }

  ::std::int64_t get_slabSize() const {
    return slabSize;
  }

  [[deprecated("Use `FOO.slabSize_ref() = BAR;` instead of `FOO.set_slabSize(BAR);`")]]
  ::std::int64_t& set_slabSize(::std::int64_t slabSize_) {
    slabSize_ref() = slabSize_;
    return slabSize;
  }

  ::std::int64_t get_minAllocSize() const {
    return minAllocSize;
  }

  [[deprecated("Use `FOO.minAllocSize_ref() = BAR;` instead of `FOO.set_minAllocSize(BAR);`")]]
  ::std::int64_t& set_minAllocSize(::std::int64_t minAllocSize_) {
    minAllocSize_ref() = minAllocSize_;
    return minAllocSize;
  }

  ::std::int32_t get_nextSlabIdx() const {
    return nextSlabIdx;
  }

  [[deprecated("Use `FOO.nextSlabIdx_ref() = BAR;` instead of `FOO.set_nextSlabIdx(BAR);`")]]
  ::std::int32_t& set_nextSlabIdx(::std::int32_t nextSlabIdx_) {
    nextSlabIdx_ref() = nextSlabIdx_;
    return nextSlabIdx;
  }
  const ::std::vector<::std::int32_t>& get_freeSlabIdxs() const&;
  ::std::vector<::std::int32_t> get_freeSlabIdxs() &&;

  template <typename T_SlabAllocatorObject_freeSlabIdxs_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.freeSlabIdxs_ref() = BAR;` instead of `FOO.set_freeSlabIdxs(BAR);`")]]
  ::std::vector<::std::int32_t>& set_freeSlabIdxs(T_SlabAllocatorObject_freeSlabIdxs_struct_setter&& freeSlabIdxs_) {
    freeSlabIdxs_ref() = std::forward<T_SlabAllocatorObject_freeSlabIdxs_struct_setter>(freeSlabIdxs_);
    return freeSlabIdxs;
  }
  const ::std::vector<::std::int32_t>& get_advisedSlabIdxs() const&;
  ::std::vector<::std::int32_t> get_advisedSlabIdxs() &&;

  template <typename T_SlabAllocatorObject_advisedSlabIdxs_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.advisedSlabIdxs_ref() = BAR;` instead of `FOO.set_advisedSlabIdxs(BAR);`")]]
  ::std::vector<::std::int32_t>& set_advisedSlabIdxs(T_SlabAllocatorObject_advisedSlabIdxs_struct_setter&& advisedSlabIdxs_) {
    advisedSlabIdxs_ref() = std::forward<T_SlabAllocatorObject_advisedSlabIdxs_struct_setter>(advisedSlabIdxs_);
    return __fbthrift_field_advisedSlabIdxs;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SlabAllocatorObject>;
  friend void swap(SlabAllocatorObject& a, SlabAllocatorObject& b);
};

template <class Protocol_>
uint32_t SlabAllocatorObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class AllocationClassObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = AllocationClassObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AllocationClassObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AllocationClassObject(apache::thrift::FragileConstructor, ::std::int8_t classId__arg, ::std::int64_t allocationSize__arg, ::std::int64_t currOffset__arg, bool canAllocate__arg, ::facebook::cachelib::serialization::SListObject freedAllocationsObject__arg, ::std::int32_t currSlabIdx__arg, ::std::vector<::std::int32_t> allocatedSlabIdxs__arg, ::std::vector<::std::int32_t> freeSlabIdxs__arg);

  AllocationClassObject(AllocationClassObject&&) noexcept;

  AllocationClassObject(const AllocationClassObject& src);


  AllocationClassObject& operator=(AllocationClassObject&&) noexcept;
  AllocationClassObject& operator=(const AllocationClassObject& src);
  void __clear();

  ~AllocationClassObject();

 public:
  ::std::int8_t classId;
 public:
  ::std::int64_t allocationSize;
 public:
  ::std::int64_t currOffset;
 public:
  bool canAllocate;
 private:
  ::facebook::cachelib::serialization::SListObject __fbthrift_field_freedAllocationsObject;
 public:
  ::std::int32_t currSlabIdx;
 public:
  ::std::vector<::std::int32_t> allocatedSlabIdxs;
 public:
  ::std::vector<::std::int32_t> freeSlabIdxs;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const AllocationClassObject&) const;
  bool operator<(const AllocationClassObject&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> classId_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->classId};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> classId_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->classId)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> classId_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->classId};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> classId_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->classId)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocationSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->allocationSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocationSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->allocationSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocationSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->allocationSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocationSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->allocationSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> currOffset_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->currOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> currOffset_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->currOffset)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> currOffset_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->currOffset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> currOffset_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->currOffset)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> canAllocate_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->canAllocate};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> canAllocate_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->canAllocate)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> canAllocate_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->canAllocate};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> canAllocate_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->canAllocate)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> freedAllocationsObject_ref() const& {
    return {this->__fbthrift_field_freedAllocationsObject, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> freedAllocationsObject_ref() const&& {
    return {std::move(this->__fbthrift_field_freedAllocationsObject), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> freedAllocationsObject_ref() & {
    return {this->__fbthrift_field_freedAllocationsObject, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> freedAllocationsObject_ref() && {
    return {std::move(this->__fbthrift_field_freedAllocationsObject), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> freedAllocationsObject() & {
    return freedAllocationsObject_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> freedAllocationsObject() const& {
    return freedAllocationsObject_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> freedAllocationsObject() && {
    return std::move(*this).freedAllocationsObject_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SListObject>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> freedAllocationsObject() const&& {
    return std::move(*this).freedAllocationsObject_ref();
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> currSlabIdx_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->currSlabIdx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> currSlabIdx_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->currSlabIdx)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> currSlabIdx_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->currSlabIdx};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> currSlabIdx_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->currSlabIdx)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocatedSlabIdxs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->allocatedSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocatedSlabIdxs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->allocatedSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocatedSlabIdxs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->allocatedSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocatedSlabIdxs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->allocatedSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> freeSlabIdxs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> freeSlabIdxs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->freeSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> freeSlabIdxs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> freeSlabIdxs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->freeSlabIdxs)};
  }

  ::std::int8_t get_classId() const {
    return classId;
  }

  [[deprecated("Use `FOO.classId_ref() = BAR;` instead of `FOO.set_classId(BAR);`")]]
  ::std::int8_t& set_classId(::std::int8_t classId_) {
    classId_ref() = classId_;
    return classId;
  }

  ::std::int64_t get_allocationSize() const {
    return allocationSize;
  }

  [[deprecated("Use `FOO.allocationSize_ref() = BAR;` instead of `FOO.set_allocationSize(BAR);`")]]
  ::std::int64_t& set_allocationSize(::std::int64_t allocationSize_) {
    allocationSize_ref() = allocationSize_;
    return allocationSize;
  }

  ::std::int64_t get_currOffset() const {
    return currOffset;
  }

  [[deprecated("Use `FOO.currOffset_ref() = BAR;` instead of `FOO.set_currOffset(BAR);`")]]
  ::std::int64_t& set_currOffset(::std::int64_t currOffset_) {
    currOffset_ref() = currOffset_;
    return currOffset;
  }

  bool get_canAllocate() const {
    return canAllocate;
  }

  [[deprecated("Use `FOO.canAllocate_ref() = BAR;` instead of `FOO.set_canAllocate(BAR);`")]]
  bool& set_canAllocate(bool canAllocate_) {
    canAllocate_ref() = canAllocate_;
    return canAllocate;
  }
  const ::facebook::cachelib::serialization::SListObject& get_freedAllocationsObject() const&;
  ::facebook::cachelib::serialization::SListObject get_freedAllocationsObject() &&;

  template <typename T_AllocationClassObject_freedAllocationsObject_struct_setter = ::facebook::cachelib::serialization::SListObject>
  [[deprecated("Use `FOO.freedAllocationsObject_ref() = BAR;` instead of `FOO.set_freedAllocationsObject(BAR);`")]]
  ::facebook::cachelib::serialization::SListObject& set_freedAllocationsObject(T_AllocationClassObject_freedAllocationsObject_struct_setter&& freedAllocationsObject_) {
    freedAllocationsObject_ref() = std::forward<T_AllocationClassObject_freedAllocationsObject_struct_setter>(freedAllocationsObject_);
    return __fbthrift_field_freedAllocationsObject;
  }

  ::std::int32_t get_currSlabIdx() const {
    return currSlabIdx;
  }

  [[deprecated("Use `FOO.currSlabIdx_ref() = BAR;` instead of `FOO.set_currSlabIdx(BAR);`")]]
  ::std::int32_t& set_currSlabIdx(::std::int32_t currSlabIdx_) {
    currSlabIdx_ref() = currSlabIdx_;
    return currSlabIdx;
  }
  const ::std::vector<::std::int32_t>& get_allocatedSlabIdxs() const&;
  ::std::vector<::std::int32_t> get_allocatedSlabIdxs() &&;

  template <typename T_AllocationClassObject_allocatedSlabIdxs_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.allocatedSlabIdxs_ref() = BAR;` instead of `FOO.set_allocatedSlabIdxs(BAR);`")]]
  ::std::vector<::std::int32_t>& set_allocatedSlabIdxs(T_AllocationClassObject_allocatedSlabIdxs_struct_setter&& allocatedSlabIdxs_) {
    allocatedSlabIdxs_ref() = std::forward<T_AllocationClassObject_allocatedSlabIdxs_struct_setter>(allocatedSlabIdxs_);
    return allocatedSlabIdxs;
  }
  const ::std::vector<::std::int32_t>& get_freeSlabIdxs() const&;
  ::std::vector<::std::int32_t> get_freeSlabIdxs() &&;

  template <typename T_AllocationClassObject_freeSlabIdxs_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.freeSlabIdxs_ref() = BAR;` instead of `FOO.set_freeSlabIdxs(BAR);`")]]
  ::std::vector<::std::int32_t>& set_freeSlabIdxs(T_AllocationClassObject_freeSlabIdxs_struct_setter&& freeSlabIdxs_) {
    freeSlabIdxs_ref() = std::forward<T_AllocationClassObject_freeSlabIdxs_struct_setter>(freeSlabIdxs_);
    return freeSlabIdxs;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AllocationClassObject>;
  friend void swap(AllocationClassObject& a, AllocationClassObject& b);
};

template <class Protocol_>
uint32_t AllocationClassObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MemoryPoolObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MemoryPoolObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MemoryPoolObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MemoryPoolObject(apache::thrift::FragileConstructor, ::std::int8_t id__arg, ::std::int64_t maxSize__arg, ::std::int64_t currSlabAllocSize__arg, ::std::int64_t currAllocSize__arg, ::std::vector<::std::int64_t> acSizes__arg, ::std::vector<::facebook::cachelib::serialization::AllocationClassObject> ac__arg, ::std::int64_t numSlabResize__arg, ::std::int64_t numSlabRebalance__arg, ::std::vector<::std::int32_t> freeSlabIdxs__arg, ::std::int64_t numSlabsAdvised__arg);

  MemoryPoolObject(MemoryPoolObject&&) noexcept;

  MemoryPoolObject(const MemoryPoolObject& src);


  MemoryPoolObject& operator=(MemoryPoolObject&&) noexcept;
  MemoryPoolObject& operator=(const MemoryPoolObject& src);
  void __clear();

  ~MemoryPoolObject();

 public:
  ::std::int8_t id;
 public:
  ::std::int64_t maxSize;
 public:
  ::std::int64_t currSlabAllocSize;
 public:
  ::std::int64_t currAllocSize;
 public:
  ::std::vector<::std::int64_t> acSizes;
 public:
  ::std::vector<::facebook::cachelib::serialization::AllocationClassObject> ac;
 private:
  ::std::int64_t __fbthrift_field_numSlabResize;
 private:
  ::std::int64_t __fbthrift_field_numSlabRebalance;
 public:
  ::std::vector<::std::int32_t> freeSlabIdxs;
 private:
  ::std::int64_t __fbthrift_field_numSlabsAdvised;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const MemoryPoolObject&) const;
  bool operator<(const MemoryPoolObject&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> id_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->id};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> id_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->id)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> id_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->id};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> id_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->id)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> maxSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->maxSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> maxSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->maxSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> maxSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->maxSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> maxSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->maxSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> currSlabAllocSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->currSlabAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> currSlabAllocSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->currSlabAllocSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> currSlabAllocSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->currSlabAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> currSlabAllocSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->currSlabAllocSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> currAllocSize_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->currAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> currAllocSize_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->currAllocSize)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> currAllocSize_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->currAllocSize};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> currAllocSize_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->currAllocSize)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> acSizes_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->acSizes};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> acSizes_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->acSizes)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> acSizes_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->acSizes};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> acSizes_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->acSizes)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> ac_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->ac};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> ac_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->ac)};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> ac_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->ac};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> ac_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->ac)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabResize_ref() const& {
    return {this->__fbthrift_field_numSlabResize, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabResize_ref() const&& {
    return {std::move(this->__fbthrift_field_numSlabResize), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabResize_ref() & {
    return {this->__fbthrift_field_numSlabResize, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabResize_ref() && {
    return {std::move(this->__fbthrift_field_numSlabResize), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabResize() & {
    return numSlabResize_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabResize() const& {
    return numSlabResize_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabResize() && {
    return std::move(*this).numSlabResize_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabResize() const&& {
    return std::move(*this).numSlabResize_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabRebalance_ref() const& {
    return {this->__fbthrift_field_numSlabRebalance, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabRebalance_ref() const&& {
    return {std::move(this->__fbthrift_field_numSlabRebalance), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabRebalance_ref() & {
    return {this->__fbthrift_field_numSlabRebalance, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabRebalance_ref() && {
    return {std::move(this->__fbthrift_field_numSlabRebalance), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabRebalance() & {
    return numSlabRebalance_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabRebalance() const& {
    return numSlabRebalance_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabRebalance() && {
    return std::move(*this).numSlabRebalance_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabRebalance() const&& {
    return std::move(*this).numSlabRebalance_ref();
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> freeSlabIdxs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> freeSlabIdxs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->freeSlabIdxs)};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> freeSlabIdxs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->freeSlabIdxs};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> freeSlabIdxs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->freeSlabIdxs)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabsAdvised_ref() const& {
    return {this->__fbthrift_field_numSlabsAdvised, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabsAdvised_ref() const&& {
    return {std::move(this->__fbthrift_field_numSlabsAdvised), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabsAdvised_ref() & {
    return {this->__fbthrift_field_numSlabsAdvised, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabsAdvised_ref() && {
    return {std::move(this->__fbthrift_field_numSlabsAdvised), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> numSlabsAdvised() & {
    return numSlabsAdvised_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> numSlabsAdvised() const& {
    return numSlabsAdvised_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> numSlabsAdvised() && {
    return std::move(*this).numSlabsAdvised_ref();
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> numSlabsAdvised() const&& {
    return std::move(*this).numSlabsAdvised_ref();
  }

  ::std::int8_t get_id() const {
    return id;
  }

  [[deprecated("Use `FOO.id_ref() = BAR;` instead of `FOO.set_id(BAR);`")]]
  ::std::int8_t& set_id(::std::int8_t id_) {
    id_ref() = id_;
    return id;
  }

  ::std::int64_t get_maxSize() const {
    return maxSize;
  }

  [[deprecated("Use `FOO.maxSize_ref() = BAR;` instead of `FOO.set_maxSize(BAR);`")]]
  ::std::int64_t& set_maxSize(::std::int64_t maxSize_) {
    maxSize_ref() = maxSize_;
    return maxSize;
  }

  ::std::int64_t get_currSlabAllocSize() const {
    return currSlabAllocSize;
  }

  [[deprecated("Use `FOO.currSlabAllocSize_ref() = BAR;` instead of `FOO.set_currSlabAllocSize(BAR);`")]]
  ::std::int64_t& set_currSlabAllocSize(::std::int64_t currSlabAllocSize_) {
    currSlabAllocSize_ref() = currSlabAllocSize_;
    return currSlabAllocSize;
  }

  ::std::int64_t get_currAllocSize() const {
    return currAllocSize;
  }

  [[deprecated("Use `FOO.currAllocSize_ref() = BAR;` instead of `FOO.set_currAllocSize(BAR);`")]]
  ::std::int64_t& set_currAllocSize(::std::int64_t currAllocSize_) {
    currAllocSize_ref() = currAllocSize_;
    return currAllocSize;
  }
  const ::std::vector<::std::int64_t>& get_acSizes() const&;
  ::std::vector<::std::int64_t> get_acSizes() &&;

  template <typename T_MemoryPoolObject_acSizes_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.acSizes_ref() = BAR;` instead of `FOO.set_acSizes(BAR);`")]]
  ::std::vector<::std::int64_t>& set_acSizes(T_MemoryPoolObject_acSizes_struct_setter&& acSizes_) {
    acSizes_ref() = std::forward<T_MemoryPoolObject_acSizes_struct_setter>(acSizes_);
    return acSizes;
  }
  const ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>& get_ac() const&;
  ::std::vector<::facebook::cachelib::serialization::AllocationClassObject> get_ac() &&;

  template <typename T_MemoryPoolObject_ac_struct_setter = ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>>
  [[deprecated("Use `FOO.ac_ref() = BAR;` instead of `FOO.set_ac(BAR);`")]]
  ::std::vector<::facebook::cachelib::serialization::AllocationClassObject>& set_ac(T_MemoryPoolObject_ac_struct_setter&& ac_) {
    ac_ref() = std::forward<T_MemoryPoolObject_ac_struct_setter>(ac_);
    return ac;
  }

  ::std::int64_t get_numSlabResize() const {
    return __fbthrift_field_numSlabResize;
  }

  [[deprecated("Use `FOO.numSlabResize_ref() = BAR;` instead of `FOO.set_numSlabResize(BAR);`")]]
  ::std::int64_t& set_numSlabResize(::std::int64_t numSlabResize_) {
    numSlabResize_ref() = numSlabResize_;
    return __fbthrift_field_numSlabResize;
  }

  ::std::int64_t get_numSlabRebalance() const {
    return __fbthrift_field_numSlabRebalance;
  }

  [[deprecated("Use `FOO.numSlabRebalance_ref() = BAR;` instead of `FOO.set_numSlabRebalance(BAR);`")]]
  ::std::int64_t& set_numSlabRebalance(::std::int64_t numSlabRebalance_) {
    numSlabRebalance_ref() = numSlabRebalance_;
    return __fbthrift_field_numSlabRebalance;
  }
  const ::std::vector<::std::int32_t>& get_freeSlabIdxs() const&;
  ::std::vector<::std::int32_t> get_freeSlabIdxs() &&;

  template <typename T_MemoryPoolObject_freeSlabIdxs_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.freeSlabIdxs_ref() = BAR;` instead of `FOO.set_freeSlabIdxs(BAR);`")]]
  ::std::vector<::std::int32_t>& set_freeSlabIdxs(T_MemoryPoolObject_freeSlabIdxs_struct_setter&& freeSlabIdxs_) {
    freeSlabIdxs_ref() = std::forward<T_MemoryPoolObject_freeSlabIdxs_struct_setter>(freeSlabIdxs_);
    return freeSlabIdxs;
  }

  ::std::int64_t get_numSlabsAdvised() const {
    return __fbthrift_field_numSlabsAdvised;
  }

  [[deprecated("Use `FOO.numSlabsAdvised_ref() = BAR;` instead of `FOO.set_numSlabsAdvised(BAR);`")]]
  ::std::int64_t& set_numSlabsAdvised(::std::int64_t numSlabsAdvised_) {
    numSlabsAdvised_ref() = numSlabsAdvised_;
    return __fbthrift_field_numSlabsAdvised;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MemoryPoolObject>;
  friend void swap(MemoryPoolObject& a, MemoryPoolObject& b);
};

template <class Protocol_>
uint32_t MemoryPoolObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MemoryPoolManagerObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MemoryPoolManagerObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MemoryPoolManagerObject() :
      __fbthrift_field_nextPoolId() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MemoryPoolManagerObject(apache::thrift::FragileConstructor, ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject> pools__arg, ::std::map<::std::string, ::std::int8_t> poolsByName__arg, ::std::int8_t nextPoolId__arg);

  MemoryPoolManagerObject(MemoryPoolManagerObject&&) noexcept;

  MemoryPoolManagerObject(const MemoryPoolManagerObject& src);


  MemoryPoolManagerObject& operator=(MemoryPoolManagerObject&&) noexcept;
  MemoryPoolManagerObject& operator=(const MemoryPoolManagerObject& src);
  void __clear();
 private:
  ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject> __fbthrift_field_pools;
 private:
  ::std::map<::std::string, ::std::int8_t> __fbthrift_field_poolsByName;
 private:
  ::std::int8_t __fbthrift_field_nextPoolId;
 private:
  apache::thrift::detail::isset_bitset<3, false> __isset;

 public:

  bool operator==(const MemoryPoolManagerObject&) const;
  bool operator<(const MemoryPoolManagerObject&) const;

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> pools_ref() const& {
    return {this->__fbthrift_field_pools, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> pools_ref() const&& {
    return {std::move(this->__fbthrift_field_pools), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> pools_ref() & {
    return {this->__fbthrift_field_pools, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> pools_ref() && {
    return {std::move(this->__fbthrift_field_pools), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> pools() & {
    return pools_ref();
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> pools() const& {
    return pools_ref();
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> pools() && {
    return std::move(*this).pools_ref();
  }

  template <typename..., typename T = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> pools() const&& {
    return std::move(*this).pools_ref();
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> poolsByName_ref() const& {
    return {this->__fbthrift_field_poolsByName, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> poolsByName_ref() const&& {
    return {std::move(this->__fbthrift_field_poolsByName), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> poolsByName_ref() & {
    return {this->__fbthrift_field_poolsByName, __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> poolsByName_ref() && {
    return {std::move(this->__fbthrift_field_poolsByName), __isset.at(folly::index_constant<1>()), __isset.bit(folly::index_constant<1>())};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> poolsByName() & {
    return poolsByName_ref();
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> poolsByName() const& {
    return poolsByName_ref();
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> poolsByName() && {
    return std::move(*this).poolsByName_ref();
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> poolsByName() const&& {
    return std::move(*this).poolsByName_ref();
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nextPoolId_ref() const& {
    return {this->__fbthrift_field_nextPoolId, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nextPoolId_ref() const&& {
    return {std::move(this->__fbthrift_field_nextPoolId), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nextPoolId_ref() & {
    return {this->__fbthrift_field_nextPoolId, __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nextPoolId_ref() && {
    return {std::move(this->__fbthrift_field_nextPoolId), __isset.at(folly::index_constant<2>()), __isset.bit(folly::index_constant<2>())};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> nextPoolId() & {
    return nextPoolId_ref();
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> nextPoolId() const& {
    return nextPoolId_ref();
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> nextPoolId() && {
    return std::move(*this).nextPoolId_ref();
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> nextPoolId() const&& {
    return std::move(*this).nextPoolId_ref();
  }
  const ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>& get_pools() const&;
  ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject> get_pools() &&;

  template <typename T_MemoryPoolManagerObject_pools_struct_setter = ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>>
  [[deprecated("Use `FOO.pools_ref() = BAR;` instead of `FOO.set_pools(BAR);`")]]
  ::std::vector<::facebook::cachelib::serialization::MemoryPoolObject>& set_pools(T_MemoryPoolManagerObject_pools_struct_setter&& pools_) {
    pools_ref() = std::forward<T_MemoryPoolManagerObject_pools_struct_setter>(pools_);
    return __fbthrift_field_pools;
  }
  const ::std::map<::std::string, ::std::int8_t>& get_poolsByName() const&;
  ::std::map<::std::string, ::std::int8_t> get_poolsByName() &&;

  template <typename T_MemoryPoolManagerObject_poolsByName_struct_setter = ::std::map<::std::string, ::std::int8_t>>
  [[deprecated("Use `FOO.poolsByName_ref() = BAR;` instead of `FOO.set_poolsByName(BAR);`")]]
  ::std::map<::std::string, ::std::int8_t>& set_poolsByName(T_MemoryPoolManagerObject_poolsByName_struct_setter&& poolsByName_) {
    poolsByName_ref() = std::forward<T_MemoryPoolManagerObject_poolsByName_struct_setter>(poolsByName_);
    return __fbthrift_field_poolsByName;
  }

  ::std::int8_t get_nextPoolId() const {
    return __fbthrift_field_nextPoolId;
  }

  [[deprecated("Use `FOO.nextPoolId_ref() = BAR;` instead of `FOO.set_nextPoolId(BAR);`")]]
  ::std::int8_t& set_nextPoolId(::std::int8_t nextPoolId_) {
    nextPoolId_ref() = nextPoolId_;
    return __fbthrift_field_nextPoolId;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MemoryPoolManagerObject>;
  friend void swap(MemoryPoolManagerObject& a, MemoryPoolManagerObject& b);
};

template <class Protocol_>
uint32_t MemoryPoolManagerObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
namespace facebook { namespace cachelib { namespace serialization {
class MemoryAllocatorObject final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MemoryAllocatorObject;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MemoryAllocatorObject();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MemoryAllocatorObject(apache::thrift::FragileConstructor, ::std::set<::std::int64_t> allocSizes__arg, bool enableZeroedSlabAllocs__arg, bool lockMemory__arg, ::facebook::cachelib::serialization::SlabAllocatorObject slabAllocator__arg, ::facebook::cachelib::serialization::MemoryPoolManagerObject memoryPoolManager__arg);

  MemoryAllocatorObject(MemoryAllocatorObject&&) noexcept;

  MemoryAllocatorObject(const MemoryAllocatorObject& src);


  MemoryAllocatorObject& operator=(MemoryAllocatorObject&&) noexcept;
  MemoryAllocatorObject& operator=(const MemoryAllocatorObject& src);
  void __clear();

  ~MemoryAllocatorObject();

 public:
  ::std::set<::std::int64_t> allocSizes;
 public:
  bool enableZeroedSlabAllocs;
 private:
  bool __fbthrift_field_lockMemory;
 public:
  ::facebook::cachelib::serialization::SlabAllocatorObject slabAllocator;
 public:
  ::facebook::cachelib::serialization::MemoryPoolManagerObject memoryPoolManager;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const MemoryAllocatorObject&) const;
  bool operator<(const MemoryAllocatorObject&) const;

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> allocSizes_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->allocSizes};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> allocSizes_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->allocSizes)};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> allocSizes_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->allocSizes};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> allocSizes_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->allocSizes)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> enableZeroedSlabAllocs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->enableZeroedSlabAllocs};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> enableZeroedSlabAllocs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->enableZeroedSlabAllocs)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> enableZeroedSlabAllocs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->enableZeroedSlabAllocs};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> enableZeroedSlabAllocs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->enableZeroedSlabAllocs)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lockMemory_ref() const& {
    return {this->__fbthrift_field_lockMemory, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lockMemory_ref() const&& {
    return {std::move(this->__fbthrift_field_lockMemory), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lockMemory_ref() & {
    return {this->__fbthrift_field_lockMemory, __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lockMemory_ref() && {
    return {std::move(this->__fbthrift_field_lockMemory), __isset.at(folly::index_constant<0>()), __isset.bit(folly::index_constant<0>())};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lockMemory() & {
    return lockMemory_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lockMemory() const& {
    return lockMemory_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lockMemory() && {
    return std::move(*this).lockMemory_ref();
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lockMemory() const&& {
    return std::move(*this).lockMemory_ref();
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SlabAllocatorObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> slabAllocator_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->slabAllocator};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SlabAllocatorObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> slabAllocator_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->slabAllocator)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SlabAllocatorObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> slabAllocator_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->slabAllocator};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::SlabAllocatorObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> slabAllocator_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->slabAllocator)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MemoryPoolManagerObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> memoryPoolManager_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->memoryPoolManager};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MemoryPoolManagerObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> memoryPoolManager_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->memoryPoolManager)};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MemoryPoolManagerObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> memoryPoolManager_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->memoryPoolManager};
  }

  template <typename..., typename T = ::facebook::cachelib::serialization::MemoryPoolManagerObject>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> memoryPoolManager_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->memoryPoolManager)};
  }
  const ::std::set<::std::int64_t>& get_allocSizes() const&;
  ::std::set<::std::int64_t> get_allocSizes() &&;

  template <typename T_MemoryAllocatorObject_allocSizes_struct_setter = ::std::set<::std::int64_t>>
  [[deprecated("Use `FOO.allocSizes_ref() = BAR;` instead of `FOO.set_allocSizes(BAR);`")]]
  ::std::set<::std::int64_t>& set_allocSizes(T_MemoryAllocatorObject_allocSizes_struct_setter&& allocSizes_) {
    allocSizes_ref() = std::forward<T_MemoryAllocatorObject_allocSizes_struct_setter>(allocSizes_);
    return allocSizes;
  }

  bool get_enableZeroedSlabAllocs() const {
    return enableZeroedSlabAllocs;
  }

  [[deprecated("Use `FOO.enableZeroedSlabAllocs_ref() = BAR;` instead of `FOO.set_enableZeroedSlabAllocs(BAR);`")]]
  bool& set_enableZeroedSlabAllocs(bool enableZeroedSlabAllocs_) {
    enableZeroedSlabAllocs_ref() = enableZeroedSlabAllocs_;
    return enableZeroedSlabAllocs;
  }

  bool get_lockMemory() const {
    return __fbthrift_field_lockMemory;
  }

  [[deprecated("Use `FOO.lockMemory_ref() = BAR;` instead of `FOO.set_lockMemory(BAR);`")]]
  bool& set_lockMemory(bool lockMemory_) {
    lockMemory_ref() = lockMemory_;
    return __fbthrift_field_lockMemory;
  }
  const ::facebook::cachelib::serialization::SlabAllocatorObject& get_slabAllocator() const&;
  ::facebook::cachelib::serialization::SlabAllocatorObject get_slabAllocator() &&;

  template <typename T_MemoryAllocatorObject_slabAllocator_struct_setter = ::facebook::cachelib::serialization::SlabAllocatorObject>
  [[deprecated("Use `FOO.slabAllocator_ref() = BAR;` instead of `FOO.set_slabAllocator(BAR);`")]]
  ::facebook::cachelib::serialization::SlabAllocatorObject& set_slabAllocator(T_MemoryAllocatorObject_slabAllocator_struct_setter&& slabAllocator_) {
    slabAllocator_ref() = std::forward<T_MemoryAllocatorObject_slabAllocator_struct_setter>(slabAllocator_);
    return slabAllocator;
  }
  const ::facebook::cachelib::serialization::MemoryPoolManagerObject& get_memoryPoolManager() const&;
  ::facebook::cachelib::serialization::MemoryPoolManagerObject get_memoryPoolManager() &&;

  template <typename T_MemoryAllocatorObject_memoryPoolManager_struct_setter = ::facebook::cachelib::serialization::MemoryPoolManagerObject>
  [[deprecated("Use `FOO.memoryPoolManager_ref() = BAR;` instead of `FOO.set_memoryPoolManager(BAR);`")]]
  ::facebook::cachelib::serialization::MemoryPoolManagerObject& set_memoryPoolManager(T_MemoryAllocatorObject_memoryPoolManager_struct_setter&& memoryPoolManager_) {
    memoryPoolManager_ref() = std::forward<T_MemoryAllocatorObject_memoryPoolManager_struct_setter>(memoryPoolManager_);
    return memoryPoolManager;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MemoryAllocatorObject>;
  friend void swap(MemoryAllocatorObject& a, MemoryAllocatorObject& b);
};

template <class Protocol_>
uint32_t MemoryAllocatorObject::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}} // facebook::cachelib::serialization
