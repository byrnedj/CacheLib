/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "objects_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);


const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::SlabAllocatorObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.SlabAllocatorObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_SlabAllocatorObject = res.first->second;
  objects_SlabAllocatorObject.name_ref() = "objects.SlabAllocatorObject";
  objects_SlabAllocatorObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_SlabAllocatorObject_fields[] = {
    {2, "memorySize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "canAllocate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "memoryPoolSize", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}},
    {7, "slabSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {8, "minAllocSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {9, "nextSlabIdx", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {10, "freeSlabIdxs", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}},
    {11, "advisedSlabIdxs", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_SlabAllocatorObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_SlabAllocatorObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::AllocationClassObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.AllocationClassObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_AllocationClassObject = res.first->second;
  objects_AllocationClassObject.name_ref() = "objects.AllocationClassObject";
  objects_AllocationClassObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_AllocationClassObject_fields[] = {
    {1, "classId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "allocationSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "currOffset", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {8, "canAllocate", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {9, "freedAllocationsObject", false, std::make_unique<Struct< ::facebook::cachelib::serialization::SListObject>>("objects.SListObject"), std::vector<ThriftConstStruct>{}},
    {10, "currSlabIdx", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}},
    {11, "allocatedSlabIdxs", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}},
    {12, "freeSlabIdxs", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_AllocationClassObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_AllocationClassObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MemoryPoolObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MemoryPoolObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MemoryPoolObject = res.first->second;
  objects_MemoryPoolObject.name_ref() = "objects.MemoryPoolObject";
  objects_MemoryPoolObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MemoryPoolObject_fields[] = {
    {1, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "maxSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {3, "currSlabAllocSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {4, "currAllocSize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {6, "acSizes", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}},
    {7, "ac", false, std::make_unique<List>(std::make_unique<Struct< ::facebook::cachelib::serialization::AllocationClassObject>>("objects.AllocationClassObject")), std::vector<ThriftConstStruct>{}},
    {8, "numSlabResize", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {9, "numSlabRebalance", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
    {10, "freeSlabIdxs", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}},
    {11, "numSlabsAdvised", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MemoryPoolObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MemoryPoolObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MemoryPoolManagerObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MemoryPoolManagerObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MemoryPoolManagerObject = res.first->second;
  objects_MemoryPoolManagerObject.name_ref() = "objects.MemoryPoolManagerObject";
  objects_MemoryPoolManagerObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MemoryPoolManagerObject_fields[] = {
    {1, "pools", false, std::make_unique<List>(std::make_unique<Struct< ::facebook::cachelib::serialization::MemoryPoolObject>>("objects.MemoryPoolObject")), std::vector<ThriftConstStruct>{}},
    {2, "poolsByName", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE)), std::vector<ThriftConstStruct>{}},
    {3, "nextPoolId", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MemoryPoolManagerObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MemoryPoolManagerObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::facebook::cachelib::serialization::MemoryAllocatorObject>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("objects.MemoryAllocatorObject", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& objects_MemoryAllocatorObject = res.first->second;
  objects_MemoryAllocatorObject.name_ref() = "objects.MemoryAllocatorObject";
  objects_MemoryAllocatorObject.is_union_ref() = false;
  static const EncodedThriftField
  objects_MemoryAllocatorObject_fields[] = {
    {1, "allocSizes", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE)), std::vector<ThriftConstStruct>{}},
    {4, "enableZeroedSlabAllocs", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {5, "lockMemory", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}},
    {2, "slabAllocator", false, std::make_unique<Struct< ::facebook::cachelib::serialization::SlabAllocatorObject>>("objects.SlabAllocatorObject"), std::vector<ThriftConstStruct>{}},
    {3, "memoryPoolManager", false, std::make_unique<Struct< ::facebook::cachelib::serialization::MemoryPoolManagerObject>>("objects.MemoryPoolManagerObject"), std::vector<ThriftConstStruct>{}},
  };
  for (const auto& f : objects_MemoryAllocatorObject_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = f.id;
    field.name_ref() = f.name;
    field.is_optional_ref() = f.is_optional;
    f.metadata_type_interface->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = f.structured_annotations;
    objects_MemoryAllocatorObject.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
