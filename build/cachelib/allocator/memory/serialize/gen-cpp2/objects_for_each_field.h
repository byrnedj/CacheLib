/**
 * Autogenerated by Thrift for objects.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include "objects_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::facebook::cachelib::serialization::SlabAllocatorObject> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).memorySize_ref()...);
    f(1, static_cast<T&&>(t).canAllocate_ref()...);
    f(2, static_cast<T&&>(t).memoryPoolSize_ref()...);
    f(3, static_cast<T&&>(t).slabSize_ref()...);
    f(4, static_cast<T&&>(t).minAllocSize_ref()...);
    f(5, static_cast<T&&>(t).nextSlabIdx_ref()...);
    f(6, static_cast<T&&>(t).freeSlabIdxs_ref()...);
    f(7, static_cast<T&&>(t).advisedSlabIdxs_ref()...);
  }
};

template <>
struct ForEachField<::facebook::cachelib::serialization::AllocationClassObject> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).classId_ref()...);
    f(1, static_cast<T&&>(t).allocationSize_ref()...);
    f(2, static_cast<T&&>(t).currOffset_ref()...);
    f(3, static_cast<T&&>(t).canAllocate_ref()...);
    f(4, static_cast<T&&>(t).freedAllocationsObject_ref()...);
    f(5, static_cast<T&&>(t).currSlabIdx_ref()...);
    f(6, static_cast<T&&>(t).allocatedSlabIdxs_ref()...);
    f(7, static_cast<T&&>(t).freeSlabIdxs_ref()...);
  }
};

template <>
struct ForEachField<::facebook::cachelib::serialization::MemoryPoolObject> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).id_ref()...);
    f(1, static_cast<T&&>(t).maxSize_ref()...);
    f(2, static_cast<T&&>(t).currSlabAllocSize_ref()...);
    f(3, static_cast<T&&>(t).currAllocSize_ref()...);
    f(4, static_cast<T&&>(t).acSizes_ref()...);
    f(5, static_cast<T&&>(t).ac_ref()...);
    f(6, static_cast<T&&>(t).numSlabResize_ref()...);
    f(7, static_cast<T&&>(t).numSlabRebalance_ref()...);
    f(8, static_cast<T&&>(t).freeSlabIdxs_ref()...);
    f(9, static_cast<T&&>(t).numSlabsAdvised_ref()...);
  }
};

template <>
struct ForEachField<::facebook::cachelib::serialization::MemoryPoolManagerObject> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).pools_ref()...);
    f(1, static_cast<T&&>(t).poolsByName_ref()...);
    f(2, static_cast<T&&>(t).nextPoolId_ref()...);
  }
};

template <>
struct ForEachField<::facebook::cachelib::serialization::MemoryAllocatorObject> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).allocSizes_ref()...);
    f(1, static_cast<T&&>(t).enableZeroedSlabAllocs_ref()...);
    f(2, static_cast<T&&>(t).lockMemory_ref()...);
    f(3, static_cast<T&&>(t).slabAllocator_ref()...);
    f(4, static_cast<T&&>(t).memoryPoolManager_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
