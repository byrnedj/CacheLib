/**
 * Autogenerated by Thrift for DataTypeBench.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "DataTypeBench_types.h"
#include "DataTypeBench_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "DataTypeBench_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::datatypebench::StdMap>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::datatypebench::StdMap>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace datatypebench {

StdMap::StdMap(const StdMap&) = default;
StdMap& StdMap::operator=(const StdMap&) = default;
StdMap::StdMap(StdMap&& other) noexcept  :
    m(std::move(other.m)) {
}

StdMap& StdMap::operator=(FOLLY_MAYBE_UNUSED StdMap&& other) noexcept {
    this->m = std::move(other.m);
    return *this;
}


StdMap::StdMap(apache::thrift::FragileConstructor, ::std::map<::std::int32_t, ::std::string> m__arg) :
    m(std::move(m__arg)) {
}


void StdMap::__clear() {
  // clear all fields
  this->m.clear();
}

bool StdMap::operator==(const StdMap& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.m_ref() == rhs.m_ref())) {
    return false;
  }
  return true;
}

bool StdMap::operator<(const StdMap& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.m_ref() == rhs.m_ref())) {
    return lhs.m_ref() < rhs.m_ref();
  }
  return false;
}

const ::std::map<::std::int32_t, ::std::string>& StdMap::get_m() const& {
  return m;
}

::std::map<::std::int32_t, ::std::string> StdMap::get_m() && {
  return std::move(m);
}


void swap(StdMap& a, StdMap& b) {
  using ::std::swap;
  swap(a.m_ref().value(), b.m_ref().value());
}

template void StdMap::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StdMap::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StdMap::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StdMap::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StdMap::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StdMap::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StdMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StdMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::datatypebench

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::facebook::cachelib::datatypebench::StdUnorderedMap>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::facebook::cachelib::datatypebench::StdUnorderedMap>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace facebook { namespace cachelib { namespace datatypebench {

StdUnorderedMap::StdUnorderedMap(const StdUnorderedMap&) = default;
StdUnorderedMap& StdUnorderedMap::operator=(const StdUnorderedMap&) = default;
StdUnorderedMap::StdUnorderedMap(StdUnorderedMap&& other) noexcept  :
    m(std::move(other.m)) {
}

StdUnorderedMap& StdUnorderedMap::operator=(FOLLY_MAYBE_UNUSED StdUnorderedMap&& other) noexcept {
    this->m = std::move(other.m);
    return *this;
}


StdUnorderedMap::StdUnorderedMap(apache::thrift::FragileConstructor, std::unordered_map<::std::int32_t, ::std::string> m__arg) :
    m(std::move(m__arg)) {
}


void StdUnorderedMap::__clear() {
  // clear all fields
  this->m.clear();
}

bool StdUnorderedMap::operator==(const StdUnorderedMap& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.m_ref() == rhs.m_ref())) {
    return false;
  }
  return true;
}

const std::unordered_map<::std::int32_t, ::std::string>& StdUnorderedMap::get_m() const& {
  return m;
}

std::unordered_map<::std::int32_t, ::std::string> StdUnorderedMap::get_m() && {
  return std::move(m);
}


void swap(StdUnorderedMap& a, StdUnorderedMap& b) {
  using ::std::swap;
  swap(a.m_ref().value(), b.m_ref().value());
}

template void StdUnorderedMap::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StdUnorderedMap::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StdUnorderedMap::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StdUnorderedMap::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StdUnorderedMap::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StdUnorderedMap::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StdUnorderedMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StdUnorderedMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // facebook::cachelib::datatypebench

namespace facebook { namespace cachelib { namespace datatypebench { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}}}} // facebook::cachelib::datatypebench
